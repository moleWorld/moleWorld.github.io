<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>序列化</title>
      <link href="2021/04/20/xu-lie-hua/"/>
      <url>2021/04/20/xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="java序列化和反序列化是什么？"><a href="#java序列化和反序列化是什么？" class="headerlink" title="java序列化和反序列化是什么？"></a>java序列化和反序列化是什么？</h4><p>序列化：把对象转换为字节序列的过程称为对象的序列化。</p><p>反序列化：把字节序列恢复为对象的过程称为对象的反序列化。</p><h4 id="为什么要用java序列化，它的作用是什么？"><a href="#为什么要用java序列化，它的作用是什么？" class="headerlink" title="为什么要用java序列化，它的作用是什么？"></a>为什么要用java序列化，它的作用是什么？</h4><p>1、 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中。</p><p>2、在网络上传送对象的字节序列。</p><h4 id="实现java序列化的方式？"><a href="#实现java序列化的方式？" class="headerlink" title="实现java序列化的方式？"></a>实现java序列化的方式？</h4><p>javaBean实现Serializable接口。</p><h4 id="为什么实现序列化的时要设置-serialVersionUID"><a href="#为什么实现序列化的时要设置-serialVersionUID" class="headerlink" title="为什么实现序列化的时要设置 serialVersionUID"></a>为什么实现序列化的时要设置 serialVersionUID</h4><p>如果一个M实体在序列化的时候存在A、B、C三个字段，则反序列化的时候也会返回这三个字段。由于需求的变化导致M实体增加了字段D，由于序列化的内容只有三个字段，在进行反序列化的时则会提示异常。故需设置标识来保证反序列化时serialVersionUID是否改变。</p><h4 id="javaBean中的字段不被序列化可以吗？"><a href="#javaBean中的字段不被序列化可以吗？" class="headerlink" title="javaBean中的字段不被序列化可以吗？"></a>javaBean中的字段不被序列化可以吗？</h4><p>使用Transient修饰关键字可以保证字段不被序列化，被反序列化时如果类型为int则默认值为0，对象型的默认值为null。</p><h4 id="static修饰的字段为什么不被序列化"><a href="#static修饰的字段为什么不被序列化" class="headerlink" title="static修饰的字段为什么不被序列化"></a>static修饰的字段为什么不被序列化</h4><p>由于static修饰的字段存在于静态方法区，而不是堆内存中，故不被序列化</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><h6 id="使用序列化的目的是把javaBean信息存入到磁盘中，方便进行网络中传输，特别是现在微服务盛行的时代。"><a href="#使用序列化的目的是把javaBean信息存入到磁盘中，方便进行网络中传输，特别是现在微服务盛行的时代。" class="headerlink" title="使用序列化的目的是把javaBean信息存入到磁盘中，方便进行网络中传输，特别是现在微服务盛行的时代。"></a>使用序列化的目的是把javaBean信息存入到磁盘中，方便进行网络中传输，特别是现在微服务盛行的时代。</h6><h6 id="目前最常见的实现序列化的方式时实现Serializable接口，并且要设置serialVersionUID的版本号以便对象更改时反序列化出错。"><a href="#目前最常见的实现序列化的方式时实现Serializable接口，并且要设置serialVersionUID的版本号以便对象更改时反序列化出错。" class="headerlink" title="目前最常见的实现序列化的方式时实现Serializable接口，并且要设置serialVersionUID的版本号以便对象更改时反序列化出错。"></a>目前最常见的实现序列化的方式时实现Serializable接口，并且要设置serialVersionUID的版本号以便对象更改时反序列化出错。</h6><h6 id="对于敏感信息不想被序列化可以用Transient关键字进行隐藏，或者用static关键字设置为静态字段。"><a href="#对于敏感信息不想被序列化可以用Transient关键字进行隐藏，或者用static关键字设置为静态字段。" class="headerlink" title="对于敏感信息不想被序列化可以用Transient关键字进行隐藏，或者用static关键字设置为静态字段。"></a>对于敏感信息不想被序列化可以用Transient关键字进行隐藏，或者用static关键字设置为静态字段。</h6>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="2021/04/20/ji-he/"/>
      <url>2021/04/20/ji-he/</url>
      
        <content type="html"><![CDATA[<h6 id="数组和集合的区别？"><a href="#数组和集合的区别？" class="headerlink" title="数组和集合的区别？"></a>数组和集合的区别？</h6><blockquote><p>数组是同一类型的数据汇总，长度是固定的，可以通过下标的形式获取值，存入值。</p></blockquote><blockquote><p>集合是具有某种特质的抽象对象汇成的集体。</p></blockquote><blockquote><p>相对来说数组适用于简单固定的数据操作，而集合不仅适用于简单的数据操作，也可操作复杂的数据信息。</p></blockquote><blockquote><p>对简单数据操作来说数组更方便快捷。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的三种创建方式</span></span><br><span class="line"><span class="keyword">int</span>[] createOne = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">int</span>[] createTwo = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">int</span>[] createThree = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//数组存储值方式，获取值方式</span></span><br><span class="line">createThree[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(createThree[<span class="number">0</span>]);</span><br><span class="line">createThree[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">System.out.println(createThree[<span class="number">0</span>]);</span><br></pre></td></tr></tbody></table></figure><h6 id="谈谈你对集合的理解"><a href="#谈谈你对集合的理解" class="headerlink" title="谈谈你对集合的理解"></a>谈谈你对集合的理解</h6><blockquote><p>集合分为Collection和Map两个大的方向，Collection有包含了Set不重复集合、List可重复集合两种。</p></blockquote><h6 id="Set集合描述"><a href="#Set集合描述" class="headerlink" title="Set集合描述"></a>Set集合描述</h6><blockquote><p>Set是存储无序元素集合，且集合内的元素不会重复。</p></blockquote><blockquote><p>Set接口的实现方式有很多，例如HashSet、TreeSet、LinkedHashSet等</p></blockquote><p>HashSet的特点是无重复、无序，存储位置是通过特定的hash算法进行获得，存储方式时数组结构，如果两个元素hashCode()相等但equals()不相等时，存储的方式时在数组的基础上增加链表。如果两则均相等则表示重复，具体存储方式可了解hashMap的存储方式。</p><p>TreeSet的特点是自然排序，无重复，存储机构是红黑树的形式，判断两个元素是否重复（重写了Comparable的CompareTo方法来判断返回值是否为0，如果0则表示重复）</p><p>LinkedHashSet的特点是按插入顺序排序，无重复，判断是否重复的方式跟HashSet一致。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的集合操作</span></span><br><span class="line">Set&lt;String&gt; setOne = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">Set&lt;String&gt; setTwo = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">Set&lt;String&gt; setThree = <span class="keyword">new</span> TreeSet&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">setOne.add(<span class="string">"ea"</span>);</span><br><span class="line">setOne.add(<span class="string">"a"</span>);</span><br><span class="line">setOne.add(<span class="string">"dc"</span>);</span><br><span class="line">setOne.add(<span class="string">"nb"</span>);</span><br><span class="line">setOne.add(<span class="string">"md"</span>);</span><br><span class="line">setTwo.add(<span class="string">"ea"</span>);</span><br><span class="line">setTwo.add(<span class="string">"a"</span>);</span><br><span class="line">setTwo.add(<span class="string">"dc"</span>);</span><br><span class="line">setTwo.add(<span class="string">"nb"</span>);</span><br><span class="line">setTwo.add(<span class="string">"md"</span>);</span><br><span class="line">setThree.add(<span class="string">"ea"</span>);</span><br><span class="line">setThree.add(<span class="string">"a"</span>);</span><br><span class="line">setThree.add(<span class="string">"dc"</span>);</span><br><span class="line">setThree.add(<span class="string">"nb"</span>);</span><br><span class="line">setThree.add(<span class="string">"md"</span>);</span><br><span class="line"><span class="comment">//遍历元素</span></span><br><span class="line">setOne.forEach(set-&gt;System.out.print(set+<span class="string">"   "</span>));</span><br><span class="line">System.out.println(<span class="string">"LinkedHashSet的遍历结果"</span>);</span><br><span class="line">setTwo.forEach(set-&gt;System.out.print(set+<span class="string">"   "</span>));</span><br><span class="line">System.out.println(<span class="string">"HashSet的遍历结果"</span>);</span><br><span class="line">setThree.forEach(set-&gt;System.out.print(set+<span class="string">"   "</span>));</span><br><span class="line">System.out.println(<span class="string">"TreeSet的遍历结果"</span>);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">setOne.remove(<span class="string">"d"</span>);</span><br><span class="line"><span class="comment">//查看集合是否有值</span></span><br><span class="line">setOne.isEmpty();</span><br><span class="line"><span class="comment">//查看集合的个数</span></span><br><span class="line"> setOne.size();</span><br><span class="line"><span class="comment">//查看是否包含元素</span></span><br><span class="line">setOne.contains(<span class="string">"d"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这是上述三种集合遍历的结果，可看出三种集合的排序方式</span></span><br><span class="line">ea   a   dc   nb   md   LinkedHashSet的遍历结果</span><br><span class="line">a   nb   md   ea   dc   HashSet的遍历结果</span><br><span class="line">a   dc   ea   md   nb   TreeSet的遍历结果</span><br></pre></td></tr></tbody></table></figure><h6 id="List集合描述"><a href="#List集合描述" class="headerlink" title="List集合描述"></a>List集合描述</h6><blockquote><p>List集合是存储有序的集合，且集合内的元素是可重复的。</p></blockquote><blockquote><p>List接口的实现方式有ArrayList,Vector,LinkedList三种方式</p></blockquote><p>ArrayList底层实现方式是数组的结构，方便查找。</p><p>Vector底层实现方式也是数组结构，与ArrayList不同之处在于它是线程安全的，所以性能消耗更大，不建议使用</p><p>LinkedList底层实现方式时双向链表结构，方便插入、删除。</p><p>由于ArrayList插入方式大部分都是尾插法，与LinkedList相比两则在数据插入时ArrayList的效率更高。</p><p>再删除时，ArrayList删除的数据更靠后或数据量很小时移动的次数也会很少，两则的效率差不太多，故使用场景中ArrayList运用比较广泛。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见的集合操作</span></span><br><span class="line">List&lt;String&gt; listOne = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;String&gt; listTwo = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">listOne.add(<span class="string">"aaa"</span>);</span><br><span class="line">listOne.add(<span class="string">"bbb"</span>);</span><br><span class="line">listOne.add(<span class="string">"ccc"</span>);</span><br><span class="line">listTwo.add(<span class="string">"aaa"</span>);</span><br><span class="line">listTwo.add(<span class="string">"bbb"</span>);</span><br><span class="line">listTwo.add(<span class="string">"ccc"</span>);</span><br><span class="line"><span class="comment">//遍历操作</span></span><br><span class="line">listOne.forEach(System.out::print);</span><br><span class="line"><span class="comment">//集合大小</span></span><br><span class="line">System.out.println(listOne.size());</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line">System.out.println(listOne.isEmpty());</span><br><span class="line"><span class="comment">//是否包含某个数据</span></span><br><span class="line">System.out.println(listOne.contains(<span class="string">"aaa"</span>));</span><br><span class="line"><span class="comment">//通过下标获取元素</span></span><br><span class="line">System.out.println(listOne.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//移除某个元素</span></span><br><span class="line">System.out.println(listOne.remove(<span class="string">"aaa"</span>));</span><br><span class="line"><span class="comment">//替换某个元素</span></span><br><span class="line">System.out.println(listOne.set(<span class="number">1</span>,<span class="string">"aaaaaaa"</span>));</span><br><span class="line"><span class="comment">//截取集合</span></span><br><span class="line">System.out.println(listOne.subList(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="comment">//获取某个元素的下标</span></span><br><span class="line">System.out.println(listOne.indexOf(<span class="string">"bbb"</span>));</span><br></pre></td></tr></tbody></table></figure><h6 id="Map集合描述"><a href="#Map集合描述" class="headerlink" title="Map集合描述"></a>Map集合描述</h6><blockquote><p>Map是一个key/value的键值对集合，key不可重复，value可重复的。</p></blockquote><blockquote><p>Map接口的实现方式有HashMap、HashTable、TreeMap、LinkedHashMap</p></blockquote><p>HashMap是我们最常用且最快速的，key底层数据结构是数组+链表+红黑树形式的，key/value都可为null。</p><p>HashTable和HashMap是线程安全的，效率较慢，故不经常用，且key/value都不允许为null。</p><p>TreeMap的存储是根据比较器进行排序，跟TreeSet的数据结构层上一致，key不可以为null。</p><p>LinkedHashMap是按存储的先后位置进行确定的，key/value都可为null。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt;  mapOne = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line">mapOne.put(<span class="string">"aaa"</span>,<span class="string">"aaaaaaaaaaa"</span>);</span><br><span class="line"><span class="comment">//遍历数据</span></span><br><span class="line">mapOne.forEach((str,str1)-&gt;{</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">});</span><br><span class="line"><span class="comment">//根据key值获取value</span></span><br><span class="line">System.out.println(mapOne.get(<span class="string">"aaa"</span>));</span><br><span class="line"><span class="comment">//判断集合是否为null</span></span><br><span class="line">System.out.println( mapOne.isEmpty());</span><br><span class="line"><span class="comment">//查看集合的大小</span></span><br><span class="line">System.out.println( mapOne.size());</span><br><span class="line"><span class="comment">//查看集合是否包含某个key值</span></span><br><span class="line">System.out.println( mapOne.containsKey(<span class="string">"aaa"</span>));</span><br><span class="line"><span class="comment">//查看集合是否包含某个value值</span></span><br><span class="line">System.out.println( mapOne.containsValue(<span class="string">"aaaaaaa"</span>));</span><br><span class="line"><span class="comment">//移除某个key值</span></span><br><span class="line">System.out.println( mapOne.remove(<span class="string">"aaaaaaa"</span>));</span><br><span class="line"><span class="comment">//替换某个key的value值</span></span><br><span class="line">System.out.println( mapOne.replace(<span class="string">"aaa"</span>,<span class="string">"bbbbbbb"</span>));</span><br><span class="line"><span class="comment">//清除value的值</span></span><br><span class="line">mapOne.clear();</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法</title>
      <link href="2021/04/20/chang-yong-pai-xu-suan-fa/"/>
      <url>2021/04/20/chang-yong-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h6 id="1、选择排序"><a href="#1、选择排序" class="headerlink" title="1、选择排序"></a>1、选择排序</h6><p><img src="https://i.loli.net/2021/04/20/eu9IyhmdiEcTHBx.gif" alt="选择排序.gif"></p><p>选择排序就是每趟排序从中找出最小的一个放在最前面，直至最后排序完成。</p><p>通俗的讲：假设有N条数据，首先第一趟排序从1-N中找出最小的一个，然后把1的数据的和最小的数据进行交换，第二趟则从2-N中找出最小的一个，再让2与最小的数据进行交换。以此类推，直到N-1趟结束。由此可推断比较次数为N+（N-1）+…..+2+1;</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[]  chooseArray  = {<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">29</span>,<span class="number">11</span>};</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ele:chooseArray) {</span><br><span class="line">            System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"排序前的遍历数据"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;chooseArray.length-<span class="number">1</span>;i++){</span><br><span class="line">            <span class="keyword">int</span> start = chooseArray[i];  <span class="comment">//每次循环的开始数据</span></span><br><span class="line">            <span class="keyword">int</span> index = i;   <span class="comment">//获取每次循环的最小下标</span></span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;    <span class="comment">//交换是临时存放值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ele:chooseArray) {</span><br><span class="line">                System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"每一次调用过程数据遍历"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;chooseArray.length;j++){</span><br><span class="line">                <span class="keyword">if</span> (start&gt;chooseArray[j]){ <span class="comment">//如果开始值大于当前值</span></span><br><span class="line">                    start=chooseArray[j];  <span class="comment">//把当前值赋予开始值，并与后续的值进行循环大小比较</span></span><br><span class="line">                    index=j;   <span class="comment">//并记录当前下标</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(index!=i){   <span class="comment">//如果本次循环下标不等于index则表示当前循环的最小值非开始值</span></span><br><span class="line">                temp = chooseArray[i]; <span class="comment">//把开始值赋给临时值</span></span><br><span class="line">                chooseArray[i]=start; <span class="comment">//把最小值赋给开始位置</span></span><br><span class="line">                chooseArray[index] =temp; <span class="comment">//把临时值赋给最小值的下标位置</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ele:chooseArray) {</span><br><span class="line">            System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"排序后的遍历数据"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每一趟排序后遍历的结果</span></span><br><span class="line">10,11,12,16,2,18,9,5,4,29,11,每一次调用过程数据遍历</span><br><span class="line">2,11,12,16,10,18,9,5,4,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,12,16,10,18,9,5,11,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,5,16,10,18,9,12,11,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,18,16,12,11,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,18,16,12,11,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,11,16,12,18,29,11,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,11,11,12,18,29,16,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,11,11,12,18,29,16,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,11,11,12,16,29,18,每一次调用过程数据遍历</span><br><span class="line">2,4,5,9,10,11,11,12,16,18,29,排序后的遍历数据</span><br></pre></td></tr></tbody></table></figure><h6 id="2、冒泡排序"><a href="#2、冒泡排序" class="headerlink" title="2、冒泡排序"></a>2、冒泡排序</h6><p><img src="https://i.loli.net/2021/04/20/YTl5X36ZAFVebE9.png" alt="冒泡排序.png"></p><p>冒泡排序是相邻的两个数据进行比较，如果前者大于后者，两则进行交换。每趟比较之后最后一个则为最大数值。</p><p>通俗的讲：假设有N条数据，第一趟则先让第一条与第二条比较，如果第一条大于第二条则两条数据进行交换，否则不进行交互，即值大的放后面，然后第二条在于第三条进行比较得出比较大的值放第三条的位置，以此类推得出最大的一条放在最后面。第二趟还是第一条与第二条相比，得出最大与第三条相比，知道N-1次（最后一条已经为最大了）。由此可推断比较次数为N+（N-1）+…..+2+1。</p><p>冒泡排序可中途进行打断，即当发现排序过程中已经排序成功则可进行break打断当前循环，以减少资源浪费。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span>[]  bubbleArray  = {<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">29</span>,<span class="number">11</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;bubbleArray.length-<span class="number">1</span>;i++){</span><br><span class="line">        <span class="keyword">boolean</span> changeFlag = <span class="keyword">false</span>;  <span class="comment">//控制后续如果值无改变可调出循环代表已排序完成</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ele:bubbleArray) {</span><br><span class="line">            System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"第"</span>+i+<span class="string">"趟排序前数据"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;bubbleArray.length-<span class="number">1</span>-i;j++){</span><br><span class="line">            <span class="keyword">if</span> (bubbleArray[j]&gt;bubbleArray[j+<span class="number">1</span>]){ <span class="comment">//如果第j条数据大于后一条数据</span></span><br><span class="line">                temp=bubbleArray[j];    <span class="comment">//则把第j条数据赋给临时数据</span></span><br><span class="line">                bubbleArray[j]=bubbleArray[j+<span class="number">1</span>];  <span class="comment">//把后条数据赋给第j条数据</span></span><br><span class="line">                bubbleArray[j+<span class="number">1</span>] =temp; <span class="comment">//再把临时数据赋给第j+1条</span></span><br><span class="line">                changeFlag=<span class="keyword">true</span>; <span class="comment">//说明有排序的动作</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(!changeFlag){ <span class="comment">//如果无排序的动作则进行打断当前循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当前做了8次循环，如果不打断则会循环数组的11-1=10次</span></span><br><span class="line">10,11,12,16,2,18,9,5,4,29,11,第0趟排序前数据</span><br><span class="line">10,11,12,2,16,9,5,4,18,11,29,第1趟排序前数据</span><br><span class="line">10,11,2,12,9,5,4,16,11,18,29,第2趟排序前数据</span><br><span class="line">10,2,11,9,5,4,12,11,16,18,29,第3趟排序前数据</span><br><span class="line">2,10,9,5,4,11,11,12,16,18,29,第4趟排序前数据</span><br><span class="line">2,9,5,4,10,11,11,12,16,18,29,第5趟排序前数据</span><br><span class="line">2,5,4,9,10,11,11,12,16,18,29,第6趟排序前数据</span><br><span class="line">2,4,5,9,10,11,11,12,16,18,29,第7趟排序前数据</span><br></pre></td></tr></tbody></table></figure><h6 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h6><p><img src="https://i.loli.net/2021/04/20/IlVLMqed8s1Y9rU.png" alt="插入排序.png"></p><p>插入排序是每次拿出一个值与已排序好的进行比较，直至排序完成。</p><p>通俗的讲：假设有N条数据，第一趟让第二条数据与第一条比较如果大于则不交换，小于则进行交换，第二趟则让第三条数据与第二条相比较，如果大于则表明，第三条比第一条也大，无需比较，如果小于则让第三条与第一条进行比较，如果小于则第一条、第二条后移一位，第三条存放第一位数据，如果大于则第一条不变，第二条与第三条交换位置。这样可以保证每次循环过后前面的数据都是排序完成的。由此可推断比较的次数为1+2+……+N-1。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[]  insertArray  = {<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">29</span>,<span class="number">11</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;insertArray.length;i++){</span><br><span class="line">        <span class="keyword">int</span> temp = insertArray[i];   <span class="comment">//把要比较的值存入临时</span></span><br><span class="line">        <span class="keyword">int</span> j ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ele:insertArray) {</span><br><span class="line">            System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"每趟比较前的遍历数据"</span>);</span><br><span class="line">        <span class="keyword">for</span> (j=i;j&gt;<span class="number">0</span>&amp;&amp;insertArray[j-<span class="number">1</span>]&gt;temp;j--){ <span class="comment">//如果临时值小于要循环的数值，</span></span><br><span class="line">            insertArray[j] =insertArray[j-<span class="number">1</span>]; <span class="comment">//需要把当前值往后移位以保证空出一个位置存放临时值</span></span><br><span class="line">        }</span><br><span class="line">        insertArray[j] =temp; <span class="comment">//把临时值存放到循环比较的j的位置</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ele:insertArray) {</span><br><span class="line">        System.out.print(ele+<span class="string">","</span>);</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"排序完成遍历数据"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10,11,12,16,2,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">10,11,12,16,2,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">10,11,12,16,2,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">10,11,12,16,2,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">2,10,11,12,16,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">2,10,11,12,16,18,9,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">2,9,10,11,12,16,18,5,4,29,11,每趟比较前的遍历数据</span><br><span class="line">2,5,9,10,11,12,16,18,4,29,11,每趟比较前的遍历数据</span><br><span class="line">2,4,5,9,10,11,12,16,18,29,11,每趟比较前的遍历数据</span><br><span class="line">2,4,5,9,10,11,12,16,18,29,11,每趟比较前的遍历数据</span><br><span class="line">2,4,5,9,10,11,11,12,16,18,29,排序完成遍历数据</span><br></pre></td></tr></tbody></table></figure><h6 id="4、快速排序"><a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h6><p><img src="https://i.loli.net/2021/04/20/ylPKqaMvrUeJ3Gc.gif" alt="快速排序.gif"></p><p>暂不书写，过程有点复杂，理解排序流程即可。</p><p>选取一个参数为基准，依次进行比较，如果比这个基准大放在不动，如果比这个基准小则移动到前面。</p><h6 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h6><p><img src="https://i.loli.net/2021/04/20/9dbEuieFLRTmfg8.png" alt="归并排序.png"></p><p>归并排序采用的是归并的思想，即把长的的数组等分分割成小的数组进行排序，最后在一步一步的合成排序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> []arr = {<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>};</span><br><span class="line">      sort(arr);</span><br><span class="line">      System.out.println(Arrays.toString(arr));</span><br><span class="line">   }</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> []temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组</span></span><br><span class="line">   }</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> []temp)</span></span>{</span><br><span class="line">      <span class="keyword">if</span>(left&lt;right){</span><br><span class="line">         <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">         sort(arr,left,mid,temp);<span class="comment">//左边归并排序，使得左子序列有序</span></span><br><span class="line">         sort(arr,mid+<span class="number">1</span>,right,temp);<span class="comment">//右边归并排序，使得右子序列有序</span></span><br><span class="line">         merge(arr,left,mid,right,temp);<span class="comment">//将两个有序子数组合并操作</span></span><br><span class="line">         System.out.println(Arrays.toString(arr));</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>{</span><br><span class="line">      <span class="keyword">int</span> i = left;<span class="comment">//左序列指针</span></span><br><span class="line">      <span class="keyword">int</span> j = mid+<span class="number">1</span>;<span class="comment">//右序列指针</span></span><br><span class="line">      <span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//临时数组指针</span></span><br><span class="line">      <span class="keyword">while</span> (i&lt;=mid &amp;&amp; j&lt;=right){</span><br><span class="line">         <span class="keyword">if</span>(arr[i]&lt;=arr[j]){</span><br><span class="line">            temp[t++] = arr[i++];</span><br><span class="line">         }<span class="keyword">else</span> {</span><br><span class="line">            temp[t++] = arr[j++];</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span>(i&lt;=mid){<span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">         temp[t++] = arr[i++];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span>(j&lt;=right){<span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">         temp[t++] = arr[j++];</span><br><span class="line">      }</span><br><span class="line">      t = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">      <span class="keyword">while</span>(left &lt;= right){</span><br><span class="line">         arr[left++] = temp[t++];</span><br><span class="line">      }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h6 id="6、希尔排序"><a href="#6、希尔排序" class="headerlink" title="6、希尔排序"></a>6、希尔排序</h6><p><img src="https://i.loli.net/2021/04/20/LDpPkswzXVyTYjf.png" alt="希尔排序.png"></p><p>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。即把数组按组进行比较，分组步数为数组的长度除以2的n次方，直至余数为1的时候，进行全局排序，可查看下图。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>{</span><br><span class="line">         <span class="keyword">int</span> []arr = {<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>};</span><br><span class="line">         shellSort(arr);</span><br><span class="line">         System.out.println(Arrays.toString(arr));</span><br><span class="line">  } </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>{</span><br><span class="line">    <span class="comment">//增量每次都/2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = arrays.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) {</span><br><span class="line">        <span class="comment">//从增量那组开始进行插入排序，直至完毕</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; arrays.length; i++) {</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">int</span> temp = arrays[j];</span><br><span class="line">            <span class="comment">// j - step 就是代表与它同组隔壁的元素</span></span><br><span class="line">            <span class="keyword">while</span> (j - step &gt;= <span class="number">0</span> &amp;&amp; arrays[j - step] &gt; temp) {</span><br><span class="line">                arrays[j] = arrays[j - step];</span><br><span class="line">                j = j - step;</span><br><span class="line">            }</span><br><span class="line">            arrays[j] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger总结</title>
      <link href="2021/04/20/swagger-zong-jie/"/>
      <url>2021/04/20/swagger-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h4><h6 id="swagger即是一个接口文档生成工具，也是一个接口调用工具，主要目的是解决前后端的即时交互问题。"><a href="#swagger即是一个接口文档生成工具，也是一个接口调用工具，主要目的是解决前后端的即时交互问题。" class="headerlink" title="swagger即是一个接口文档生成工具，也是一个接口调用工具，主要目的是解决前后端的即时交互问题。"></a>swagger即是一个接口文档生成工具，也是一个接口调用工具，主要目的是解决前后端的即时交互问题。</h6><h6 id="swagger的配置："><a href="#swagger的配置：" class="headerlink" title="swagger的配置："></a>swagger的配置：</h6><ul><li>ApiInfo   文档的简介</li><li>enable    是否启动swagger   以便保证生产环境不启动</li><li>select ().apis ()  可扫描的路径</li><li>select().paths()  可匹配的路径     </li><li>build是固定结束格式</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>  <span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>{</span><br><span class="line">        <span class="comment">//读取application.yml读取的环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>,<span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">//判断运行的环境是否是可读取的环境</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> ApiInfo(<span class="string">"小婉Swagger"</span>,   <span class="comment">//title</span></span><br><span class="line">                                <span class="string">"当一个闲鱼"</span>,<span class="comment">//description</span></span><br><span class="line">                                <span class="string">"v.1.0"</span>,<span class="comment">//版本</span></span><br><span class="line">                                <span class="string">"47.100.69.105"</span>,    <span class="comment">//服务器地址</span></span><br><span class="line">                                <span class="keyword">new</span> Contact(</span><br><span class="line">                                        <span class="string">"小婉"</span>,</span><br><span class="line">                                        <span class="string">"47.100.69.105"</span>,</span><br><span class="line">                                        <span class="string">"wlkjava@163.com"</span></span><br><span class="line">                                ),     <span class="comment">//个人介绍</span></span><br><span class="line">                                <span class="string">"Apache 2.0"</span>,</span><br><span class="line">                                <span class="string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,</span><br><span class="line">                                <span class="keyword">new</span> ArrayList()</span><br><span class="line">                                )</span><br><span class="line">                        )</span><br><span class="line">                <span class="comment">//右上角的命名path</span></span><br><span class="line">                .groupName(<span class="string">"learn"</span>)</span><br><span class="line">                <span class="comment">//设置swagger是否启动</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//RequestHandlerSelectors.basePackage扫描包下的所有接口</span></span><br><span class="line">                <span class="comment">//RequestHandlerSelectors.any扫描所有接口    具体的可查看源码</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.swagger.controller"</span>))</span><br><span class="line">                <span class="comment">//匹配所有符合的路径</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="swagger的常用注解"><a href="#swagger的常用注解" class="headerlink" title="swagger的常用注解"></a>swagger的常用注解</h6><ul><li>@ApiModel    用在实体类上的注解</li><li>@ApiModelProperty        用在字段上的注解</li><li>@ApiOperation                 用在方法上的注解</li><li>@ApiParam                       用在入参上的注解</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = "用户信息表")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "用户名")</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "密码")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210123111636040.png" alt="image-20210123111636040"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation("测试")</span></span><br><span class="line"><span class="meta">@PostMapping(value = "/test")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@ApiParam(value ="用户名")</span> String  userName)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1、swagger在一些比较难理解的属性或者接口上增加注释信息 （替换了平常书写接口文档的office、wps等）</p><p>2、接口文档实时更新（更易于前后端对接、其各部分之间的对接）</p><p>3、在线测试工具（替换了接口测试工具，如POSTMan等）</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射基础</title>
      <link href="2021/04/20/fan-she-ji-chu/"/>
      <url>2021/04/20/fan-she-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><h6 id="正常方式-引入包名、类名-————————-gt-new对象————————-gt-取得实例化对象"><a href="#正常方式-引入包名、类名-————————-gt-new对象————————-gt-取得实例化对象" class="headerlink" title="正常方式: 引入包名、类名_————————>new对象————————>取得实例化对象"></a>正常方式: 引入包名、类名_————————&gt;new对象————————&gt;取得实例化对象</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.annotation.example.demo.entity.Student; <span class="comment">//引入类名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();  <span class="comment">//new对象</span></span><br><span class="line">        student.getAddress(); <span class="comment">//获取对象信息</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h6 id="反射方式：-实例化对象—————————-gt-getClass-方法—————————-gt-获取完整的包类信息"><a href="#反射方式：-实例化对象—————————-gt-getClass-方法—————————-gt-获取完整的包类信息" class="headerlink" title="反射方式：  实例化对象—————————>getClass()方法—————————>获取完整的包类信息"></a>反射方式：  实例化对象—————————&gt;getClass()方法—————————&gt;获取完整的包类信息</h6></blockquote><blockquote><h6 id="全路径信息—————————-gt-forName-方法—————————-gt-获取完整的包类信息"><a href="#全路径信息—————————-gt-forName-方法—————————-gt-获取完整的包类信息" class="headerlink" title="全路径信息—————————>forName()方法—————————>获取完整的包类信息"></a>全路径信息—————————&gt;forName()方法—————————&gt;获取完整的包类信息</h6></blockquote><blockquote><h6 id="类名————————————-gt-class——————————————-gt-获取完整的包类信息"><a href="#类名————————————-gt-class——————————————-gt-获取完整的包类信息" class="headerlink" title="类名————————————>.class——————————————>获取完整的包类信息"></a>类名————————————&gt;.class——————————————&gt;获取完整的包类信息</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">    <span class="comment">// 方式1----通过全路径获取student信息</span></span><br><span class="line">    Class c= Class.forName(<span class="string">"com.annotation.example.demo.entity.Student"</span>);</span><br><span class="line">    System.out.println(c.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2----通过new对象的getClass()方法获取student信息</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    Class c2 = student.getClass();</span><br><span class="line">    System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3----通过类名获取student信息</span></span><br><span class="line">    Class c1 = Student.class;</span><br><span class="line">    System.out.println(c1.hashCode());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h6 id="反射获取基本信息：更多方法可自行测试查看"><a href="#反射获取基本信息：更多方法可自行测试查看" class="headerlink" title="反射获取基本信息：更多方法可自行测试查看"></a>反射获取基本信息：更多方法可自行测试查看</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">    <span class="comment">// 方式1----通过全路径获取student信息</span></span><br><span class="line">    Class c= Class.forName(<span class="string">"com.annotation.example.demo.entity.Student"</span>);</span><br><span class="line">    System.out.println(c.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得包名+类名</span></span><br><span class="line">    System.out.println(c.getName());</span><br><span class="line">    <span class="comment">//获得类名</span></span><br><span class="line">    System.out.println(c.getSimpleName());</span><br><span class="line">    <span class="comment">//获取public的信息</span></span><br><span class="line">    Field[] fields = c.getFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//获取全部的信息</span></span><br><span class="line">    Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : declaredFields) {</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//获取具体某一个的字段</span></span><br><span class="line">    Field name = c.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="comment">//获取本类的方法及其父类的额所有方法</span></span><br><span class="line">    Method[] methods = c.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//只获取本类的基本信息</span></span><br><span class="line">    Method[] declaredMethods = c.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method declaredMethod : declaredMethods) {</span><br><span class="line">        System.out.println(declaredMethod);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h6 id="常用的获取对象信息的方式"><a href="#常用的获取对象信息的方式" class="headerlink" title="常用的获取对象信息的方式"></a>常用的获取对象信息的方式</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>{</span><br><span class="line">    Class c = Student.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过newInstance的方式获取对象信息</span></span><br><span class="line">    Student student = (Student) c.newInstance();</span><br><span class="line">    student.setName(<span class="string">"小婉"</span>);</span><br><span class="line">    System.out.println(student.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造器创建对象</span></span><br><span class="line">    Constructor declaredConstructor = c.getDeclaredConstructor(String.class, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    Student student1 = (Student) declaredConstructor.newInstance(<span class="string">"小婉"</span>, <span class="string">"驻马店"</span>, <span class="number">30</span>);</span><br><span class="line">    System.out.println(student1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过获取方法获得对象信息</span></span><br><span class="line">    Student student2 = (Student) c.newInstance();</span><br><span class="line">    Method setName = c.getDeclaredMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line">   setName.invoke(student2, <span class="string">"小婉"</span>);</span><br><span class="line">    System.out.println(student2.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射操作属性</span></span><br><span class="line">    Student student3 = (Student) c.newInstance();</span><br><span class="line">    Field name1 = c.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">    <span class="comment">//不能直接操作私有属性,关闭安全检测，如果反射运用比较多，可以关闭检测提高性能</span></span><br><span class="line">    name1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    name1.set(student3,<span class="string">"小婉"</span>);</span><br><span class="line">    System.out.println(student3.getName());</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h6 id="获取参数类型及返回值类型步骤"><a href="#获取参数类型及返回值类型步骤" class="headerlink" title="获取参数类型及返回值类型步骤"></a>获取参数类型及返回值类型步骤</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>{</span><br><span class="line">    Method method = Reflection2.class.getMethod(<span class="string">"test1"</span>, Map.class, List.class); <span class="comment">//获取test1的方法</span></span><br><span class="line">    Type[] types = method.getGenericParameterTypes(); <span class="comment">//获取方法内所有的参数</span></span><br><span class="line">    <span class="keyword">for</span> (Type type : types) {  <span class="comment">//便利参数</span></span><br><span class="line">        System.out.println(type); <span class="comment">//输出参数</span></span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType){   <span class="comment">//查看参数是否属于参数化类型</span></span><br><span class="line">            Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();  <span class="comment">//把参数强转为参数化类型在获取具体的参数</span></span><br><span class="line">            <span class="keyword">for</span> (Type typeArgument : typeArguments) {</span><br><span class="line">                System.out.println(typeArgument);   <span class="comment">//便利参数并打印</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Method method1 = Reflection2.class.getMethod(<span class="string">"test2"</span>);</span><br><span class="line">    Type genericReturnType = method1.getGenericReturnType();   <span class="comment">//获取返回参数类型</span></span><br><span class="line">    System.out.println(genericReturnType);</span><br><span class="line">    <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType){   <span class="comment">//查看参数是否属于参数化类型</span></span><br><span class="line">        Type[] typeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();  <span class="comment">//把参数强转为参数化类型在获取具体的参数</span></span><br><span class="line">        <span class="keyword">for</span> (Type typeArgument : typeArguments) {</span><br><span class="line">            System.out.println(typeArgument);   <span class="comment">//便利参数并打印</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String, Student&gt; map, List&lt;Student&gt; list)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Student&gt; <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><h6 id="获取注解的值及参数信息"><a href="#获取注解的值及参数信息" class="headerlink" title="获取注解的值及参数信息"></a>获取注解的值及参数信息</h6></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflection3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>{</span><br><span class="line">        classAnnotation annotation = Student2.class.getAnnotation(classAnnotation.class);</span><br><span class="line">        System.out.println(annotation.value());</span><br><span class="line"></span><br><span class="line">        Field name = Student2.class.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        filedAnnotation annotation1 = name.getAnnotation(filedAnnotation.class);</span><br><span class="line">        System.out.println(annotation1.id());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line">        <span class="comment">//db_student</span></span><br><span class="line"><span class="comment">//db_id</span></span><br><span class="line"><span class="comment">//10  </span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@classAnnotation("db_student")</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@filedAnnotation(id="db_id",length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@filedAnnotation(id="db_address",length = 19)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@filedAnnotation(id="db_age",length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> classAnnotation{</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字段注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> filedAnnotation{</span><br><span class="line">    <span class="function">String <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局捕获日志</title>
      <link href="2021/04/20/quan-ju-bu-huo-ri-zhi/"/>
      <url>2021/04/20/quan-ju-bu-huo-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h6 id="问题：记录所有方法运行时间用来判断哪些方法的书写不规范导致运行时间过长，如果超过规定的秒数-2000ms-则存储到日志表，以便后续优化。"><a href="#问题：记录所有方法运行时间用来判断哪些方法的书写不规范导致运行时间过长，如果超过规定的秒数-2000ms-则存储到日志表，以便后续优化。" class="headerlink" title="问题：记录所有方法运行时间用来判断哪些方法的书写不规范导致运行时间过长，如果超过规定的秒数(2000ms)则存储到日志表，以便后续优化。"></a>问题：记录所有方法运行时间用来判断哪些方法的书写不规范导致运行时间过长，如果超过规定的秒数(2000ms)则存储到日志表，以便后续优化。</h6><p>一、引入常用jar包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--日志依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger图形页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatisPlus依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatisPlus生成代码依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatisPlus生成模板前端模板依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--热部署依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hutool工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>二、书写aop切入方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspectConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogOverTimeMapper logOverTimeMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置切入点的值为LogAnnotation注解</span></span><br><span class="line">    <span class="comment">//如果嫌注解麻烦，可以配置具体的类上例如：@Pointcut("execution(* com.example.aop.controller.TestController.*(..)) ||     @annotation(com.example.aop.annotation.LogAnnotation)")</span></span><br><span class="line">    <span class="meta">@Pointcut(value = "@annotation(com.example.aop.annotation.LogAnnotation)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用环绕通知，在方法的执行前后分别记录一个时间相减</span></span><br><span class="line">    <span class="meta">@Around("pointCut()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doLog</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>{</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        Object object=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            object=proceedingJoinPoint.proceed();</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable throwable) {</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            log.info(throwable.getMessage());</span><br><span class="line">        }<span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//如果最后时间减去开始时间大于2000ms则插入日志表</span></span><br><span class="line">            <span class="keyword">if</span> ((endTime-startTime)&gt;<span class="keyword">new</span> Long(<span class="number">2000</span>)){</span><br><span class="line">                LogOverTime logOverTime = <span class="keyword">new</span> LogOverTime();</span><br><span class="line">                logOverTime.setLastDate( LocalDateTime.now());</span><br><span class="line">                logOverTime.setLastName(<span class="string">"admin"</span>);</span><br><span class="line">                logOverTime.setMethod(proceedingJoinPoint.getSignature().toShortString());</span><br><span class="line">                logOverTime.setRunMillisecond(<span class="keyword">new</span> Integer((<span class="keyword">int</span>) (endTime-startTime)));</span><br><span class="line">                logOverTimeMapper.insert(logOverTime);</span><br><span class="line">            }</span><br><span class="line">            log.info(proceedingJoinPoint.getSignature().toShortString() + <span class="string">"方法执行了："</span> + (endTime - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>三、书写注解LogAnnotation</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogAnnotation {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>四、书写实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@ApiModel(value="LogOverTime对象", description="方法超时日志表")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogOverTime</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "主键自增")</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "方法")</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "运行时间")</span></span><br><span class="line">    <span class="keyword">private</span> Integer runMillisecond;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "最后修改时间")</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime lastDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "最后修改人")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>五、书写Mapper</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此Mapper用的增强mybatis（mybatis_plus）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LogOverTimeMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">LogOverTime</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>六、书写测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/testApi")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LogAnnotation</span></span><br><span class="line">    <span class="meta">@PostMapping("/test1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testAop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"123132"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LogAnnotation</span></span><br><span class="line">    <span class="meta">@PostMapping("/test2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAop2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解</title>
      <link href="2021/04/20/zi-ding-yi-zhu-jie/"/>
      <url>2021/04/20/zi-ding-yi-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h6 id="Target-：用于描述注解的使用范围"><a href="#Target-：用于描述注解的使用范围" class="headerlink" title="@Target ：用于描述注解的使用范围"></a>@Target ：用于描述注解的使用范围</h6><h6 id="Retention：-表示需在该级别保存注释信息，用于描述生命周期，常用的有（SOURCE-lt-CLASS-lt-RUNTIME）"><a href="#Retention：-表示需在该级别保存注释信息，用于描述生命周期，常用的有（SOURCE-lt-CLASS-lt-RUNTIME）" class="headerlink" title="@Retention： 表示需在该级别保存注释信息，用于描述生命周期，常用的有（SOURCE<CLASS<RUNTIME）"></a>@Retention： 表示需在该级别保存注释信息，用于描述生命周期，常用的有（SOURCE&lt;CLASS&lt;RUNTIME）</h6><h6 id="Document-说明该注解被包含在javadoc中"><a href="#Document-说明该注解被包含在javadoc中" class="headerlink" title="@Document : 说明该注解被包含在javadoc中"></a>@Document : 说明该注解被包含在javadoc中</h6><h6 id="inherited：说明之类可以继承父类中的注解"><a href="#inherited：说明之类可以继承父类中的注解" class="headerlink" title="@inherited：说明之类可以继承父类中的注解"></a>@inherited：说明之类可以继承父类中的注解</h6><h6 id="注解参数的注意事项，如果注解的参数只有一个且为value时，可以省略value参数。"><a href="#注解参数的注意事项，如果注解的参数只有一个且为value时，可以省略value参数。" class="headerlink" title="注解参数的注意事项，如果注解的参数只有一个且为value时，可以省略value参数。"></a>注解参数的注意事项，如果注解的参数只有一个且为value时，可以省略value参数。</h6><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotations(name="微录客",schools = {"北京大学","清华大学"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotation</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotations(name="微录客",schools = {"北京大学","清华大学"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = {ElementType.METHOD,ElementType.TYPE})</span>       <span class="comment">//  描述在方法、包、类上等等</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME )</span>   <span class="comment">//表示该注释的生命周期为</span></span><br><span class="line"><span class="meta">@Documented</span>     <span class="comment">//该注解包含在文档中</span></span><br><span class="line"><span class="meta">@Inherited</span>      <span class="comment">//该注解可以被之类继承</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotations{</span><br><span class="line">    <span class="comment">//注解的参数 如果没有默认值必须在注解上加上该注解的参数，可以为String类型也可以为数组</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span>  ""</span>;</span><br><span class="line">    String [] schools();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永鑫项目架构搭建</title>
      <link href="2021/04/20/yong-xin-xiang-mu-jia-gou-da-jian/"/>
      <url>2021/04/20/yong-xin-xiang-mu-jia-gou-da-jian/</url>
      
        <content type="html"><![CDATA[<h6 id="一、项目搭建目的"><a href="#一、项目搭建目的" class="headerlink" title="一、项目搭建目的"></a>一、项目搭建目的</h6><p>由于永城收付管理系统速率过慢，代码冗余，因此需一步一步的把永城收付管理系统的永鑫模块单独独立出来。</p><h6 id="二、框架设计"><a href="#二、框架设计" class="headerlink" title="二、框架设计"></a>二、框架设计</h6><ul><li>框架：Springboot微服务为基础，shiro做为权限框架，layui前端框架，模板引擎是thymleaf、orm采用mybatisPlus</li><li>数据库：oracle数据库，druid连接池</li><li>中间件：jwt用作token认证，redis缓存框架，swagger接口展示,quartz定时任务。</li></ul><h6 id="三、项目设计"><a href="#三、项目设计" class="headerlink" title="三、项目设计"></a>三、项目设计</h6><ol><li>权限方面重新设计</li><li>批处理项目取消，统一改成quartz定时任务。</li><li>web项目进行重构</li></ol><h6 id="四、项目注意要点"><a href="#四、项目注意要点" class="headerlink" title="四、项目注意要点"></a>四、项目注意要点</h6><ol><li>采用前后端分离模式，前后端数据传输json格式。</li><li>规定好正确返回、错误返回的信息标志，例（成功0000，失败4000）等标志以方便对接。</li><li>设置全局异常捕获框架以方便异常造成的事故定位。</li><li>全局打印一个方法的运行时间，如果超过规定的时间则记录下来并存入日志中以便后续排查。</li><li>文档设计安装统一格式，且统一上传到永鑫收付文件服务器上以便统一管理。</li></ol><h6 id="五、项目采用版本"><a href="#五、项目采用版本" class="headerlink" title="五、项目采用版本"></a>五、项目采用版本</h6><table><thead><tr><th>springboot</th><th>2.1.8</th></tr></thead><tbody><tr><td>shiro</td><td>1.4.1</td></tr><tr><td>swagger</td><td>2.9.2</td></tr><tr><td>fastjson</td><td>1.2.49</td></tr><tr><td>jwt</td><td>0.9.1</td></tr><tr><td>oracle</td><td>11</td></tr><tr><td>java</td><td>8</td></tr><tr><td>druid</td><td>1.1.10</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="2021/04/18/linux-ji-chu-ming-ling/"/>
      <url>2021/04/18/linux-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看版本信息</span><br><span class="line">uname -r</span><br><span class="line">查看系统版本</span><br><span class="line">cat /etc/os-release</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="2021/04/18/docker-ji-chu/"/>
      <url>2021/04/18/docker-ji-chu/</url>
      
        <content type="html"><![CDATA[<h6 id="docker的默认工作路径是-var-lib-docker"><a href="#docker的默认工作路径是-var-lib-docker" class="headerlink" title="docker的默认工作路径是      /var/lib/docker"></a>docker的默认工作路径是      /var/lib/docker</h6><h6 id="docker的基础是镜像与容器"><a href="#docker的基础是镜像与容器" class="headerlink" title="docker的基础是镜像与容器"></a>docker的基础是镜像与容器</h6><h6 id="docker的官网地址：https-docs-docker-com"><a href="#docker的官网地址：https-docs-docker-com" class="headerlink" title="docker的官网地址：https://docs.docker.com/"></a>docker的官网地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></h6><h4 id="Docker的基本命令："><a href="#Docker的基本命令：" class="headerlink" title="Docker的基本命令："></a>Docker的基本命令：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version    #查看docker的基本信息</span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器镜像</span><br><span class="line">docker 命令 --help #docker命令帮助查询</span><br></pre></td></tr></tbody></table></figure><h4 id="Docker的镜像常用命令："><a href="#Docker的镜像常用命令：" class="headerlink" title="Docker的镜像常用命令："></a>Docker的镜像常用命令：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images -a#查看所有镜像信息</span><br><span class="line">docker images -q #查看所有镜像id</span><br><span class="line">docker images -filter ......   #过滤信息</span><br></pre></td></tr></tbody></table></figure><h4 id="docker搜索镜像："><a href="#docker搜索镜像：" class="headerlink" title="docker搜索镜像："></a>docker搜索镜像：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search 服务名称  </span><br><span class="line">例如：docker search java </span><br><span class="line"> docker search mysql</span><br><span class="line">docker search mysql --filter=stars=200   #查询星数在200以上</span><br></pre></td></tr></tbody></table></figure><h4 id="拉取镜像："><a href="#拉取镜像：" class="headerlink" title="拉取镜像："></a>拉取镜像：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull (镜像名称)：（镜像版本）   #例如  docker pull mysql:5.7   </span><br><span class="line">docker pull (镜像名称)#拉取最新版本的镜像信息</span><br></pre></td></tr></tbody></table></figure><h4 id="删除镜像："><a href="#删除镜像：" class="headerlink" title="删除镜像："></a>删除镜像：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f (镜像id)#删除镜像信息，镜像d可通过docker images进行查询</span><br><span class="line">docker rmi -f $（dokcer images） #删除所有镜像信息</span><br><span class="line">dokker rmi -f 镜像id 镜像id #删除多个镜像信息</span><br></pre></td></tr></tbody></table></figure><h4 id="Docker的容器命令："><a href="#Docker的容器命令：" class="headerlink" title="Docker的容器命令："></a>Docker的容器命令：</h4><h6 id="首先我们先下载个centos镜像命令进行学习"><a href="#首先我们先下载个centos镜像命令进行学习" class="headerlink" title="首先我们先下载个centos镜像命令进行学习"></a>首先我们先下载个centos镜像命令进行学习</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></tbody></table></figure><h6 id="容器命令："><a href="#容器命令：" class="headerlink" title="容器命令："></a>容器命令：</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta">#</span><span class="bash">常用参数</span></span><br><span class="line">--name   #容器名字，用来区分容器</span><br><span class="line">-d #后台方式运行</span><br><span class="line">-it  #使用交互方式运行，进入容器查看内容</span><br><span class="line">-p #指定容器的端口  -p 主机端口：容器端口</span><br><span class="line">-P #随机指定端口</span><br><span class="line"></span><br><span class="line">运行查看容器：</span><br><span class="line">docker run -it centos /bin/bash  #进入centos</span><br><span class="line">docker ps #查看正在运行的容器</span><br><span class="line">docker ps -a #查看历史运行的容器</span><br><span class="line">docker ps -n=？   #查看最近运行的容器,如果加上=？则表示最近几条</span><br><span class="line"></span><br><span class="line">退出容器：</span><br><span class="line">exit #容器停止并退出</span><br><span class="line">CTRL+P+Q#容器不停止退出</span><br><span class="line"></span><br><span class="line">删除容器：</span><br><span class="line">docker rm 容器id    #删除非运行的容器，如果运行会报错</span><br><span class="line">docker rm -f 容器id#强制删除容器</span><br><span class="line">docker rm -f $(docker ps -aq)#删除所有容器id</span><br></pre></td></tr></tbody></table></figure><h6 id="启动容器命令："><a href="#启动容器命令：" class="headerlink" title="启动容器命令："></a>启动容器命令：</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></tbody></table></figure><h6 id="日志命令："><a href="#日志命令：" class="headerlink" title="日志命令："></a>日志命令：</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -tf tail 10 容器id   #查询后十条日志信息   tail 10 可省略</span><br></pre></td></tr></tbody></table></figure><h6 id="常用其他命令："><a href="#常用其他命令：" class="headerlink" title="常用其他命令："></a>常用其他命令：</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id#查看容器进程</span><br><span class="line">docker inspect  容器id#查看容器的基本信息</span><br><span class="line">docker exec  -it  容器id /bin/bash#进入正在启动的容器，并开启一个新容器</span><br><span class="line">docker attach 容器id#进入正在启动的容器，不会启动新的容器</span><br><span class="line">docker cp 容器id:容器内路径 容器外路径  #复制文件从内部容器到外部容器</span><br><span class="line">docker stats #查询docker的内存使用率</span><br></pre></td></tr></tbody></table></figure><h6 id="下载nginx镜像到linux服务器"><a href="#下载nginx镜像到linux服务器" class="headerlink" title="下载nginx镜像到linux服务器"></a>下载nginx镜像到linux服务器</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx #查看镜像</span><br><span class="line">docker pull nginx #下载最新版本的镜像</span><br><span class="line">docker images#查看下载的容器</span><br><span class="line">docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">-d   后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 给容器起个名字以便分辨</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 3344 宿主机端口,即外部端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 80 内部容器端口即nginx端口</span> </span><br></pre></td></tr></tbody></table></figure><h6 id="下载mysql5-7到linux服务器"><a href="#下载mysql5-7到linux服务器" class="headerlink" title="下载mysql5.7到linux服务器"></a>下载mysql5.7到linux服务器</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">获取mysql镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 卷挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e 环境配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 端口映射</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 给容器命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置mysql地址环境</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=wlk161536 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-v的目的是映射到本地</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
