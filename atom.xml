<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>摩尔的世界</title>
  
  <subtitle>moleBlog@Wei</subtitle>
  <link href="http://www.luckyzmj.cn/atom.xml" rel="self"/>
  
  <link href="http://www.luckyzmj.cn/"/>
  <updated>2022-04-07T07:08:36.481Z</updated>
  <id>http://www.luckyzmj.cn/</id>
  
  <author>
    <name>摩尔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea的常用快捷键</title>
    <link href="http://www.luckyzmj.cn/posts/b5ebccd2.html"/>
    <id>http://www.luckyzmj.cn/posts/b5ebccd2.html</id>
    <published>2022-05-10T15:31:57.000Z</published>
    <updated>2022-04-07T07:08:36.481Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="CTRL"><a href="#CTRL" class="headerlink" title="CTRL+"></a>CTRL+</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件进行文本查找 （必备）</td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换 （必备）</td></tr><tr><td>Ctrl + Z</td><td>撤销 （必备）</td></tr><tr><td>Ctrl + Y</td><td>删除光标所在行 或 删除选中的行 （必备）</td></tr><tr><td>Ctrl + X</td><td>剪切光标所在行 或 剪切选择内容</td></tr><tr><td>Ctrl + C</td><td>复制光标所在行 或 复制选择内容</td></tr><tr><td>Ctrl + D</td><td><strong>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</strong></td></tr><tr><td>Ctrl + W</td><td><strong>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</strong></td></tr><tr><td>Ctrl + E</td><td>显示最近打开的文件记录列表</td></tr><tr><td>Ctrl  N</td><td>根据输入的 类名 查找类文件</td></tr><tr><td>Ctrl + G</td><td>查找当前文件中某一行的信息</td></tr><tr><td>Ctrl + J</td><td><strong>插入自定义的模板</strong></td></tr><tr><td>Ctrl + P</td><td>用于提示当前的方法需要哪些参数</td></tr><tr><td>Ctrl + Q</td><td>光标所在的变量 / 类名 / 方法名的路径</td></tr><tr><td>Ctrl + B</td><td>进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</td></tr><tr><td>Ctrl + O</td><td>选择可重写的方法</td></tr><tr><td>Ctrl + I</td><td>选择可继承的方法</td></tr><tr><td>Ctrl + +</td><td>展开代码</td></tr><tr><td>Ctrl +  -</td><td>折叠代码</td></tr><tr><td>Ctrl + /</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td></tr><tr><td>Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td>Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td>Ctrl + F3</td><td>调转到所选中的词的下一个引用位置</td></tr><tr><td>Ctrl + F4</td><td>关闭当前编辑文件</td></tr><tr><td>Ctrl + F8</td><td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td>Ctrl + F9</td><td>执行 Make Project 操作</td></tr><tr><td>Ctrl + F12</td><td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td>Ctrl + Tab</td><td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr></tbody></table><h4 id="ALT"><a href="#ALT" class="headerlink" title="ALT+"></a>ALT+</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt + Insert</td><td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td>Alt + F3</td><td>选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td>Alt + F7</td><td>查找光标所在的方法 / 变量 / 类被调用的地方</td></tr><tr><td>Alt + F8</td><td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td>Alt + 左方向键</td><td>按左方向切换当前已打开的文件视图</td></tr><tr><td>Alt + 右方向键</td><td>按右方向切换当前已打开的文件视图</td></tr><tr><td>Alt + 前方向键</td><td>当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td>Alt + 后方向键</td><td>当前光标跳转到当前文件的后一个方法名位置</td></tr></tbody></table><h4 id="SHIFT"><a href="#SHIFT" class="headerlink" title="SHIFT+"></a>SHIFT+</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Shift + F4</td><td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td>Shift + F7</td><td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td>Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td>Shift + Tab</td><td>取消缩进</td></tr><tr><td>Shift + 左键单击</td><td>在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr><tr><td>Shift + 滚轮前后滚动</td><td>当前文件的横向滚动轴滚动</td></tr></tbody></table><h4 id="CTRL-ALT"><a href="#CTRL-ALT" class="headerlink" title="CTRL+ALT"></a>CTRL+ALT</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Alt + L</td><td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td></tr><tr><td>Ctrl + Alt + B</td><td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口）</td></tr><tr><td>Ctrl + Alt + I</td><td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td>Ctrl + Alt + V</td><td>快速引进变量</td></tr><tr><td>Ctrl + Alt + S</td><td>打开 IntelliJ IDEA 系统设置</td></tr><tr><td>Ctrl + Alt + F11</td><td>切换全屏模式</td></tr><tr><td>Ctrl + Alt + Enter</td><td>光标所在行上空出一行，光标定位到新行</td></tr><tr><td>Ctrl + Alt + 左方向键</td><td>退回到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td></tr><tr><td>Ctrl + Alt + 右方向键</td><td>前进到上一个操作的地方 （必备）（注意与其他软件快捷键冲突）</td></tr><tr><td>Ctrl + Alt + 前方向键</td><td>在查找模式下，跳到上个查找的文件</td></tr><tr><td>Ctrl + Alt + 后方向键</td><td>在查找模式下，跳到下个查找的文件</td></tr></tbody></table><h4 id="CTRL-SHIFT"><a href="#CTRL-SHIFT" class="headerlink" title="CTRL+SHIFT"></a>CTRL+SHIFT</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + R</td><td>根据输入内容查找或替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td></tr><tr><td>Ctrl + Shift + J</td><td>自动将下一行合并到当前行末尾 （必备）</td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销 （必备）</td></tr><tr><td>Ctrl + Shift + W</td><td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td></tr><tr><td>Ctrl + Shift + U</td><td>对选中的代码进行大 / 小写轮流转换 （必备）</td></tr><tr><td>Ctrl + Shift + C</td><td>复制当前文件磁盘路径到剪贴板</td></tr><tr><td>Ctrl + Shift + +</td><td>展开所有代码</td></tr><tr><td>Ctrl + Shift + -</td><td>折叠所有代码</td></tr><tr><td>Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td>Ctrl + Shift + F12</td><td>编辑器最大化</td></tr><tr><td>Ctrl + Shift + Enter</td><td>自动结束代码，行末自动添加分号 （必备）</td></tr><tr><td>Ctrl + Shift + Backspace</td><td>退回到上次修改的地方</td></tr><tr><td>Ctrl + Shift + 左/右方向键</td><td>在代码上选中区域调试，在文件上结构宽度调试</td></tr><tr><td>Ctrl + Shift + 后方向键</td><td>在代码上上下文件换位，在文件上选中文件</td></tr></tbody></table><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F2</td><td>跳转到下一个高亮错误 或 警告位置 （必备）</td></tr><tr><td>F3</td><td>在查找模式下，定位到下一个匹配处</td></tr><tr><td>F4</td><td>编辑源</td></tr><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>Tab</td><td>缩进</td></tr><tr><td>连按两次Shift</td><td>弹出 Search Everywhere 弹出层</td></tr></tbody></table><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://www.luckyzmj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="idea" scheme="http://www.luckyzmj.cn/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>小技巧</title>
    <link href="http://www.luckyzmj.cn/posts/a40d665e.html"/>
    <id>http://www.luckyzmj.cn/posts/a40d665e.html</id>
    <published>2022-04-15T10:05:37.000Z</published>
    <updated>2022-04-21T01:41:22.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="idea中autowired修饰的方法报红"><a href="#idea中autowired修饰的方法报红" class="headerlink" title="idea中autowired修饰的方法报红"></a>idea中autowired修饰的方法报红</h3><p>点击file-&gt;settings -&gt; Editor-&gt;Inspections</p><p>如图：输入spring core</p><p>点击Autowring for Bean Class将级别由之前的error改成warning</p><p>如果需要去除@Autowired的波浪线，直接把code改为warning即可</p><p><img src="https://img-blog.csdnimg.cn/d836eecab1194a90abad579a354785a7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC9566h5Y-r5oiR5peg5ZCN5LmL6L6I,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java基础" scheme="http://www.luckyzmj.cn/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="知识点自贴" scheme="http://www.luckyzmj.cn/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%87%AA%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>精句</title>
    <link href="http://www.luckyzmj.cn/posts/98a729ec.html"/>
    <id>http://www.luckyzmj.cn/posts/98a729ec.html</id>
    <published>2022-04-15T03:02:55.000Z</published>
    <updated>2022-04-07T07:08:36.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="知其然并知其所以然，授人以鱼不如授人以渔！学习需慢慢来，不能太过急躁。"><a href="#知其然并知其所以然，授人以鱼不如授人以渔！学习需慢慢来，不能太过急躁。" class="headerlink" title="知其然并知其所以然，授人以鱼不如授人以渔！学习需慢慢来，不能太过急躁。"></a>知其然并知其所以然，授人以鱼不如授人以渔！学习需慢慢来，不能太过急躁。</h4><h4 id="实践才能出真理，只停留表面就是纸上谈兵。"><a href="#实践才能出真理，只停留表面就是纸上谈兵。" class="headerlink" title="实践才能出真理，只停留表面就是纸上谈兵。"></a>实践才能出真理，只停留表面就是纸上谈兵。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="感悟" scheme="http://www.luckyzmj.cn/categories/%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="生活" scheme="http://www.luckyzmj.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>springSecurity</title>
    <link href="http://www.luckyzmj.cn/posts/b04a945b.html"/>
    <id>http://www.luckyzmj.cn/posts/b04a945b.html</id>
    <published>2022-04-12T00:18:52.000Z</published>
    <updated>2022-04-21T01:41:22.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="https://www.shouxicto.com/zb_users/upload/2021/10/20211018113155163452791593263.png" alt="SpringSecurity 鉴权流程分析，一起来看看吧！  第1张"></p><blockquote><p> 流程图名词介绍：</p></blockquote><ul><li>SecurityContextPersistenceFilter是承接容器的session与spring security的重要filter，主要工作是从session中获取SecurityContext，然后放到上下文中，之后的filter大多依赖这个来获取登录态。其主要是通过HttpSessionSecurityContextRepository来存取的。</li><li>UsernamePasswordAuthenticationFilter是登录页面填写用户名和密码的登录请求。</li><li>ExceptionTranslationFilter处理过滤器中抛出的任何AccessDeniedException和AuthenticatedException。</li><li>FilterSecurityInterceptor负责权限校验的过滤器。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="http://www.luckyzmj.cn/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring" scheme="http://www.luckyzmj.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>nacos集群环境搭建</title>
    <link href="http://www.luckyzmj.cn/posts/11ca7c3b.html"/>
    <id>http://www.luckyzmj.cn/posts/11ca7c3b.html</id>
    <published>2022-04-08T03:41:33.000Z</published>
    <updated>2022-04-07T07:08:36.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Nacos搭建集群环境"><a href="#Nacos搭建集群环境" class="headerlink" title="Nacos搭建集群环境"></a>Nacos搭建集群环境</h2><h4 id="下载所需软件"><a href="#下载所需软件" class="headerlink" title="下载所需软件"></a>下载所需软件</h4><p>JDK1.8+</p><p>Nacos安装包</p><p>nginx安装包</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h5><ul><li><p>官网地址:   <a href="https://www.oracle.com/java/technologies/downloads/#java8">Java Downloads | Oracle</a></p></li><li><p>下载 <a href="https://www.oracle.com/java/technologies/downloads/#license-lightbox">jdk-8u321-linux-x64.tar.gz</a></p></li><li><p>导入到linux系统中，并进行解压</p></li><li><p>配置环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#编辑此文件</span><span class="token function">vim</span> /etc/profile<span class="token comment">#在该文件最底部插入，只需要保证java_home的值跟自己的目录对照就可以，其他保持不变</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_181  <span class="token comment">#jdk安装目录</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_PATH</span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${JRE_HOME}</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">${JAVA_PATH}</span><span class="token comment">#环境变量有效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment">#测试是否成功</span>java -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="下载nacos"><a href="#下载nacos" class="headerlink" title="下载nacos"></a>下载nacos</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#创建文件夹</span><span class="token function">mkdir</span> nacos<span class="token comment"># 进入文件夹</span><span class="token builtin class-name">cd</span> nacos<span class="token comment">#下载压缩包 https://pd.zwc365.com为加速地址</span><span class="token function">wget</span> https://pd.zwc365.com/seturl/https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.tar.gz<span class="token comment"># 解压文件夹，并重命名文件夹,生成3个nacos文件夹分别为nacos8849、nacos8850、nacos8851</span><span class="token function">tar</span> zxvf nacos-server-2.0.3.tar.gz<span class="token function">mv</span> nacos nacos8849<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改nacos配置"><a href="#修改nacos配置" class="headerlink" title="修改nacos配置"></a>修改nacos配置</h5><ul><li>#修改nacos的默认数据库为mysql，application.properties</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server.port<span class="token operator">=</span><span class="token number">8849</span> <span class="token comment"># 修改端口号</span>spring.datasource.platform<span class="token operator">=</span>mysqldb.num<span class="token operator">=</span><span class="token number">1</span>db.url.0<span class="token operator">=</span>jdbc:mysql://127.0.0.1:3310/nacos?characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span><span class="token assign-left variable">connectTimeout</span><span class="token operator">=</span><span class="token number">1000</span><span class="token operator">&amp;</span><span class="token assign-left variable">socketTimeout</span><span class="token operator">=</span><span class="token number">3000</span><span class="token operator">&amp;</span><span class="token assign-left variable">autoReconnect</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">useUnicode</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">useSSL</span><span class="token operator">=</span>false<span class="token operator">&amp;</span><span class="token assign-left variable">serverTimezone</span><span class="token operator">=</span>UTCdb.user.0<span class="token operator">=</span>rootdb.password.0<span class="token operator">=</span>wlk161536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>#集群nacos，修改cluster.conf文件 #example 配置三个nacos的IP地址加端口号</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">122.112</span>.148.42:8849<span class="token number">122.112</span>.148.42:8850<span class="token number">122.112</span>.148.42:8851<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>#修改启动文件，防止内存溢出startup.sh，修改集群的内存跟单机一样</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${JAVA_OPT}</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动nacos</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./startup.sh<span class="token comment">#关闭则运行shutdown.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h5><ul><li>安装nginx的过程就忽略了</li><li>配置nginx.conf文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">upstream clusterNacos<span class="token punctuation">{</span>server <span class="token number">122.112</span>.148.42:8849<span class="token punctuation">;</span>server <span class="token number">122.112</span>.148.42:8850<span class="token punctuation">;</span>server <span class="token number">122.112</span>.148.42:8851<span class="token punctuation">;</span><span class="token punctuation">}</span>server<span class="token punctuation">{</span>listener   <span class="token number">8847</span><span class="token punctuation">;</span>server_name localhost<span class="token punctuation">;</span>location /nacos/ <span class="token punctuation">{</span>proxy_pass http://clusterNacos/nacos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="http://www.luckyzmj.cn/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="springCloud" scheme="http://www.luckyzmj.cn/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>springCloud Alibaba</title>
    <link href="http://www.luckyzmj.cn/posts/undefined.html"/>
    <id>http://www.luckyzmj.cn/posts/undefined.html</id>
    <published>2022-04-07T10:11:47.000Z</published>
    <updated>2022-04-10T15:26:19.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>SpringCloud 阿里系列的官网地址</p></blockquote><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p><blockquote><p>组件介绍</p></blockquote><ul><li>Nacos Discovery     服务注册发现</li><li>Nacos Config           动态配置文件</li><li>Ribbon                      客户端多项目之间负载均衡</li><li>OpenFeign               服务之间的调用，更契合SpringMVC</li><li>Sentinel                    流量管理工具，主要是流控、熔断</li><li>seata                         分布式事务管理工具</li><li>gateWay                   网关</li><li>skyWalking              链路追踪</li></ul><h4 id="Nacos-Discovery"><a href="#Nacos-Discovery" class="headerlink" title="Nacos Discovery"></a>Nacos Discovery</h4><p>Nacos提供基于DNS和基于RPC的服务发现，即能被用来支持https/http的服务注册与发现，也支持RPC如dubbo的服务注册与发现。</p><p>Nacos是一种去中心化的架构，属于CAP理论里的AP架构，支持最终一致性，在分布式服务发现与注册场景下具有很不错的性能。</p><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>Zookeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MYSQL/Client</td><td>Beat Client</td><td>TCP/HTTP/gRPC/Cmd</td><td>Keep Alive</td></tr><tr><td>负载均衡策略</td><td>权重/ metadata/Selector/Ribbon</td><td>Ribbon</td><td>Fabio</td><td>—</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td><td>无</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>HTTP/DNS</td><td>HTTP</td><td>HTTP/DNS</td><td>TCP</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>跨注册中心同步</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>K8S集成</td><td>支持</td><td>不支持</td><td>支持</td><td>不支</td></tr></tbody></table><h4 id="Nacos-Config"><a href="#Nacos-Config" class="headerlink" title="Nacos Config"></a>Nacos Config</h4><h5 id="Apollo-与-Nacos-功能对比"><a href="#Apollo-与-Nacos-功能对比" class="headerlink" title="Apollo 与 Nacos 功能对比"></a>Apollo 与 Nacos 功能对比</h5><ul><li>nacos配置文件支持比较多的格式，支持yaml、text、json、xml、html、Properties，apollo只支持xml、text、Properties的格式，没有兼容springboot中比较通用的yaml配置。</li><li>apollo用户管理以及权限管理做的比较好和全面，适合做部门或者公司级的配置中心。nacos比较简洁明了（也可以说没有做权限这一块的开发），适合做小组内，或者小型java团体使用。</li><li>apollo区分多环境是直接通过环境指定，可以直接对比和切换，而nacos是通过命名空间进行区分的。</li><li>nacos是支持多格式的配置文件，但是解析上没有apollo做的好，apollo虽然支持的配置格式较少，不过会进行解析，使每个配置看起来比较直观，修改的时候比较直观，可以对单个进行修改。</li></ul><h5 id="Apollo与nacos对比结论"><a href="#Apollo与nacos对比结论" class="headerlink" title="Apollo与nacos对比结论"></a>Apollo与nacos对比结论</h5><ul><li>Nacos部署简化，Nacos整合了注册中心、配置中心功能，且部署相比apollo简单，方便管理和监控。</li><li>apollo容器化较困难，Nacos有官网的镜像可以直接部署，总体来说，Nacos比apollo更符合KISS原则</li><li>性能方面，Nacos读写tps比apollo稍强一些</li></ul><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><p>同一个项目中在不同的服务器之间负载均衡的一种策略,常用的策略轮询、权重，不做过多介绍。</p><h4 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h4><p>微服务调用中更符合开发人员熟悉的接口调用的工具，也不做过多介绍。</p><h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h4><blockquote><p>什么是服务雪崩</p></blockquote><p>因服务提供者不可用导致服务调用者不可用，并将服务不可用无线扩大的场景的过程称为服务雪崩。</p><h5 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h5><p>解释：用于控制访问的数量。</p><p>应用场景：洪峰流量（秒杀、大促等一瞬间很多流量的这种），APIGateway精准控制API流量等。</p><p>QPS：每秒请求的数量，一般都是用这种方式进行控制</p><blockquote><p>流控模式简介：</p></blockquote><ol><li>直接模式：我们最常用的模式，对某一个接口进行流量控制。</li><li>关联模式：两个接口存在竞争（例如数据库插入和读取竞争），则通过限定一个接口的流量来控制，防止竞争耗内存。</li><li>链路模式：针对的方法流量控制，即多个接口调用同一个方法时，我们可以让某个接口限制流量，其他接口正常。</li></ol><blockquote><p>流控效果简介：</p></blockquote><ol><li>快速失败：最常用的，就是如果超过流量控制，直接提示失败</li><li>warn Up:  预热冷启动模式,例如某个接口一直不调用，突然需要大批量调用，就可以设置为warn Up模式让他慢慢进来防止数据库压垮，当系统中存在缓存后，直接从缓存中查询，防止了数据库瞬间的压力过大导致系统down且能达到系统能访问的最大流量。</li><li>排队等待：适用于脉冲流量，简单来说就是脉底的时间充分利用起来执行超出的流量。</li></ol><h5 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h5><blockquote><p>降级策略</p></blockquote><h6 id="慢调用"><a href="#慢调用" class="headerlink" title="慢调用"></a>慢调用</h6><p>介绍：单位时间内如果接口请求的时间超过最大RT，且请求次数不低于5次，比例小于0.1则进行熔断，熔断时长为30s。</p><p><img src="https://img-blog.csdnimg.cn/b9e3e05113224d2bb4cd4dbecb06450e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JieHlscWYxMjZjb20=,size_16,color_FFFFFF,t_70#" alt="在这里插入图片描述"></p><ul><li>最大RT：接口响应最大时长</li><li>比例阈值：单位时间内请求次数比例</li><li>熔断时长：熔断之后断开的时间</li><li>最小请求数：请求接口的最少次数</li><li>统计时长：单位时间</li></ul><h6 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h6><p>介绍：单位时间内请求次数大于5，比例小于0.1，则进行熔断，熔断时长为30s.</p><p><img src="https://img-blog.csdnimg.cn/11625039c69d41e5b786b7d3977d785c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JieHlscWYxMjZjb20=,size_16,color_FFFFFF,t_70#" alt="img"></p><h6 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h6><p><img src="https://img-blog.csdnimg.cn/6cab44b6fbd9414dac5b9b302a2781ce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JieHlscWYxMjZjb20=,size_16,color_FFFFFF,t_70#" alt="在这里插入图片描述"></p><h5 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h5><p>针对的是某个接口某一个参数进行流量控制，即对改接口某个值进行一种特定的流控，其他值走原有的流控模式。</p><p>常用场景：某个商品的秒杀、ip地址攻击等具有唯一性的瞬间流量场景。</p><h4 id="senta"><a href="#senta" class="headerlink" title="senta"></a>senta</h4><p>分布式事务实现模式:</p><h5 id="AT-auto-transcation"><a href="#AT-auto-transcation" class="headerlink" title="AT(auto transcation)"></a>AT(auto transcation)</h5><p>简介：AT模式采用的是把数据库执行前的数据存入before image,执行后的数据存入after image再进行加行级锁，如果程序执行完成正确则释放锁，错误则把after image的数据回滚到before image的状态。</p><h5 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h5><p>简介：根据自己的业务场景实现一段业务逻辑Try、二段确认confirm、二段回滚cancel三个操作。</p><p>和AT模式相比：侵入性更强，但不需要增加行级锁。</p><p>消息队列实现</p><h4 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h4><p>微服务网关的主要意义是指系统的统一入口，它封装了应用程序内部的实现结构，为客户端提供统一的服务，一些业务本身功能无关的公共逻辑一般都在这里实现，例如认证、鉴权、监控、路由转发等。</p><blockquote><p>专业名词</p></blockquote><ul><li>路由id ：     唯一标识，表示路由到具体的那个服务</li><li>路由uri ：   需要转发的地址</li><li>路由断言predicates-path：跟路由id一个性质</li><li>路由过滤filters-StripPrefix：由于判断路由断言时增加一个唯一标识，到达真正的服务需去除该路由id</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  profiles:    active: 8088  cloud:    gateway:      routes:        - id: order-route    # 路由的唯一标识，路由到具体的服务          uri: localhost:8080   #路由路径，标识具体到那个路径，后续改成nacos          predicates:            - Path=/order-server/**   #标识前缀带有order-server的都路由到这个服务            # http://localhost:8088/order-server/add/order          filters:            - StrixPrefix=1   #去除上一层的服务即order-server，真正转发的时候路径就变成了http://localhost:8080/add/order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="skyWalking"><a href="#skyWalking" class="headerlink" title="skyWalking"></a>skyWalking</h4><p>目的：主要为了解决微服务中出现问题时更快的定位。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="http://www.luckyzmj.cn/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="springCloud" scheme="http://www.luckyzmj.cn/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>poi读写文件</title>
    <link href="http://www.luckyzmj.cn/posts/2202bf79.html"/>
    <id>http://www.luckyzmj.cn/posts/2202bf79.html</id>
    <published>2022-04-07T03:40:14.000Z</published>
    <updated>2022-04-07T07:08:36.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="谈谈-POI"><a href="#谈谈-POI" class="headerlink" title="谈谈 POI"></a>谈谈 POI</h2><blockquote><p>常用途径</p></blockquote><p>开发中经常会设计到excel的处理，如导出Excel，导入Excel到数据库中！ </p><p>操作Excel目前比较流行的就是 Apache POI 和 阿里巴巴的 easyExcel ！</p><blockquote><p>官网地址</p></blockquote><p>Apache POI 官网：<a href="https://poi.apache.org/">https://poi.apache.org/</a></p><h4 id="POI-Excel写"><a href="#POI-Excel写" class="headerlink" title="POI-Excel写"></a>POI-Excel写</h4><blockquote><p>创建项目</p></blockquote><p>1、建立一个空项目 Bilibili-狂神说java，创建普通Maven的Moudle kuang-poi</p><p> 2、引入pom依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token function">xls</span><span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token function">xlsx</span><span class="token punctuation">(</span><span class="token number">07</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>poi<span class="token operator">-</span>ooxml<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日期格式化工具<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>joda<span class="token operator">-</span>time<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>joda<span class="token operator">-</span>time<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.10</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>test<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>03、07版本的对象的不一样，但写法不同，都继承于Workbook</p></blockquote><p>03、07的公共类方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token class-name">Workbook</span> workbook <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//创建工作表</span>    <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"用户导入案例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建第一行</span>    <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第一列（1，1）</span>    <span class="token class-name">Cell</span> cell11 <span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell11<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第二列（1，2）</span>    <span class="token class-name">Cell</span> cell12 <span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell12<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"手机号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第三列（1，3）</span>    <span class="token class-name">Cell</span> cell13 <span class="token operator">=</span>row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell13<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建第二行</span>    <span class="token class-name">Row</span> row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第一列（2，1）</span>    <span class="token class-name">Cell</span> cell21 <span class="token operator">=</span>row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell21<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"位陆坤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第二列（2，2）</span>    <span class="token class-name">Cell</span> cell22 <span class="token operator">=</span>row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell22<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"17349756393"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建单元格第一行第三列（2，3）</span>    <span class="token class-name">Cell</span> cell23 <span class="token operator">=</span>row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cell23<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"wlkjava@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>03版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excelWrite03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//创建工作簿</span>    <span class="token class-name">Workbook</span> workbook <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入工作表</span>    <span class="token function">createSheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件写出</span>    <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>PATH<span class="token operator">+</span><span class="token string">"用户导出案例03.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>07版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excelWrite07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//创建工作簿</span>    <span class="token class-name">Workbook</span> workbook <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入工作表</span>    <span class="token function">createSheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件写出</span>    <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>PATH<span class="token operator">+</span><span class="token string">"用户导出案例07.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>07增强版：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excelWrite07S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//创建工作簿</span>    <span class="token class-name">Workbook</span> workbook <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SXSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入工作表</span>    <span class="token function">createSheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件写出</span>    <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>PATH<span class="token operator">+</span><span class="token string">"用户导出案例07S.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果超过100条会生成临时文件，删除临时文件</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SXSSFWorkbook</span><span class="token punctuation">)</span>workbook<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>三则的不同之处</p></blockquote><p>HSSFWorkbook是03版本的excel后缀是xsl，优点速度比较快，但最多只能处理65536行，否则会抛出异常。</p><p>XSSFWorkbook是07版本的excel后缀是xslx，优点是可以写入大数据量，但速度比较慢。</p><p>SXSSFWorkbook是加强的07版本，</p><p>优点：可以写非常大的数据量，如100万条甚至更多条，写数据速度快，占用更少的内存</p><p> 注意： 过程中会产生临时文件，需要清理临时文件， 默认由100条记录被保存在内存中</p><h4 id="POI-excel读"><a href="#POI-excel读" class="headerlink" title="POI-excel读"></a>POI-excel读</h4><p>读取和写入所使用的接口都是一样，</p><p>读取一般都存在则校验，下面是封装的实体类校验：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//表头为姓名、手机号、邮箱、出生日期、年龄、金额、备注，其中前六项都为必填，备注可空。</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> PATH <span class="token operator">=</span><span class="token string">"D:\\study\\apachePoi\\"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> titleList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"手机号"</span><span class="token punctuation">,</span><span class="token string">"邮箱"</span><span class="token punctuation">,</span><span class="token string">"出生日期"</span><span class="token punctuation">,</span><span class="token string">"年龄"</span><span class="token punctuation">,</span><span class="token string">"金额"</span><span class="token punctuation">,</span><span class="token string">"备注"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cellList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token punctuation">,</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token punctuation">,</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_STRING<span class="token punctuation">,</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">,</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">,</span>        <span class="token class-name">HSSFCell</span><span class="token punctuation">.</span>CELL_TYPE_NUMERIC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excelRead03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//获取流信息</span>    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>PATH<span class="token operator">+</span><span class="token string">"用户导出案例03.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把流信息转换成表格</span>    <span class="token class-name">Workbook</span> workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取表格信息 以下表获取</span>    <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取第一列信息，一般为表头</span>    <span class="token class-name">Row</span> titleRow <span class="token operator">=</span>sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把表头的字段和定的枚举字段匹配</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titleList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>titleRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"列不能为空,请输入："</span><span class="token operator">+</span>titleRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>titleList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>titleRow<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"列的值应为"</span><span class="token operator">+</span>titleList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取列数</span>    <span class="token keyword">int</span> rowCount <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getPhysicalNumberOfRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//循环获取表数据（不包括表头）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;</span>rowCount <span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Row</span> rowData <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rowData<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum<span class="token operator">&lt;</span>cellList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>rowNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"列第"</span><span class="token operator">+</span><span class="token punctuation">(</span>cellNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"行的数据为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cellList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cellNum<span class="token operator">==</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">HSSFDateUtil</span><span class="token punctuation">.</span><span class="token function">isCellDateFormatted</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日期格式不正确类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="项目基础" scheme="http://www.luckyzmj.cn/categories/%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java基础" scheme="http://www.luckyzmj.cn/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mybatisPlus基础总结</title>
    <link href="http://www.luckyzmj.cn/posts/b3435bfe.html"/>
    <id>http://www.luckyzmj.cn/posts/b3435bfe.html</id>
    <published>2022-04-07T03:38:51.000Z</published>
    <updated>2022-04-07T07:08:36.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="搭建前准备工作"><a href="#搭建前准备工作" class="headerlink" title="搭建前准备工作"></a>搭建前准备工作</h3><p>1、创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">30</span> <span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">50</span> <span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 真实开发中，version（乐观锁）、deleted（逻辑删除）、gmt_create、gmt_modified</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、引入依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lombok <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> mybatis<span class="token operator">-</span>plus <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> mybatis<span class="token operator">-</span>plus 是自己开发，并非官方的！ <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span><span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.0</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、数据库链接</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># `mysql 5 驱动不同 com.mysql.jdbc.Driver`</span><span class="token comment"># `mysql 8 驱动不同com.mysql.cj.jdbc.Driver、需要增加时区的配置`</span><span class="token attr-name">`serverTimezone</span><span class="token punctuation">=</span><span class="token attr-value">GMT%2B`</span><span class="token attr-name">`spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root`</span><span class="token attr-name">`spring.datasource.password</span><span class="token punctuation">=</span> <span class="token attr-value">123456`</span><span class="token attr-name">`spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_plus?`</span><span class="token attr-name">`useSSL</span><span class="token punctuation">=</span><span class="token attr-value">false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B`</span><span class="token attr-name">`spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、mapper层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kuang<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span> <span class="token comment">// 代表持久层集成baseMapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 配置日志控制台看到打印的日志 </span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisPlusApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 参数是一个 Wrapper ，条件构造器，这里我们先不用 null</span>        <span class="token comment">// 查询全部用户</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span>查询单个用户        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入方法"><a href="#插入方法" class="headerlink" title="插入方法"></a>插入方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MybatisPlusApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//自动生成的id会填充到user中，默认填充是雪花算法</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><blockquote><p>默认 ID_WORKER 全局唯一id</p></blockquote><p>分布式系统唯一id生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><blockquote><p>常用的id方式有以下几种，其中最常用的是雪花算法和主键id自增。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">IdType</span> <span class="token punctuation">{</span>     <span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 数据库id自增 </span>    <span class="token function">NONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 未设置主键 </span>    <span class="token function">INPUT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 手动输入 </span>    <span class="token function">ID_WORKER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认的全局唯一id </span>    <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 全局唯一id uuid </span>    <span class="token function">ID_WORKER_STR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ID_WORKER 字符串表示法 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意：updateById是一个对象，相当于静态拼接sql，id作为条件，其他做为修改的内容</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h4><p>由于开始时间、修改时间每个表所必须的，需抽取出来用自动填充的方式进行修改或者插入，而无需程序员进行操作</p><p>1、在字段上加上注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字段添加填充内容 </span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span> <span class="token comment">//插入</span><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span> <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span> <span class="token comment">//插入及修改</span><span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、用处理器处理该注解</p><pre class="line-numbers language-none"><code class="language-none">package com.kuang.handler;import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;import lombok.extern.slf4j.Slf4j;import org.apache.ibatis.reflection.MetaObject;import org.springframework.stereotype.Component;import java.util.Date;@Slf4j@Component // 一定不要忘记把处理器加到IOC容器中！public class MyMetaObjectHandler implements MetaObjectHandler {    // 插入时的填充策略    @Override    public void insertFill(MetaObject metaObject) {        log.info("start insert fill.....");        this.setFieldValByName("createTime",new Date(),metaObject);        this.setFieldValByName("updateTime",new Date(),metaObject);    }    // 更新时的填充策略    @Override    public void updateFill(MetaObject metaObject) {        log.info("start update fill.....");        this.setFieldValByName("updateTime",new Date(),metaObject);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>1、加上@Version注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Version</span> <span class="token comment">//乐观锁Version注解</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、扫描我们的mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 扫描我们的 mapper 文件夹</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.wlk.study.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span><span class="token comment">// 注册乐观锁插件</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">OptimisticLockerInterceptor</span> <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、每次进行修改操作时都会把version的值带上进行修改，如果不匹配则插入不成功。</p><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><blockquote><p>物理删除 ：从数据库中直接移除  </p><p>逻辑删除 ：再数据库中没有被移除，而是通过一个变量来让他失效！ deleted = 0 =&gt; deleted = 1</p></blockquote><p>1、增加deleted属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span> <span class="token comment">//逻辑删除</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、添加bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ISqlInjector</span> <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、增加配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、测试</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testUpdate(){  int id =1;    //如果不增加上述3步操作，则执行的是物理删除操作，即把原有的数据从数据库移除    //如果增加上述3步操作，则进行逻辑删除，只是把原有的deleted字段从0-1，且查询时不查询为1的数据    int i = userMapper.deleteById(id);    System.out.println(i);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>1、配置拦截器组件即可</p><pre class="line-numbers language-none"><code class="language-none">// 分页插件@Beanpublic PaginationInterceptor paginationInterceptor() {return new PaginationInterceptor();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、测试</p><pre class="line-numbers language-none"><code class="language-none">// 测试分页查询@Testpublic void testPage(){    // 参数一：当前页    // 参数二：页面大小    // 使用了分页插件之后，所有的分页操作也变得简单的！    Page&lt;User&gt; page = new Page&lt;&gt;(2,5);    userMapper.selectPage(page,null);    page.getRecords().forEach(System.out::println);    System.out.println(page.getTotal());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** SQL执行效率插件*/</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 设置 dev test 环境开启，保证我们的效率</span><span class="token keyword">public</span> <span class="token class-name">PerformanceInterceptor</span> <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">PerformanceInterceptor</span> performanceInterceptor <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setMaxTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ms设置sql执行的最大时间，如果超过了则不执行且抛出异常</span>    performanceInterceptor<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否格式化代码</span>    <span class="token keyword">return</span> performanceInterceptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件构造器wapper"><a href="#条件构造器wapper" class="headerlink" title="条件构造器wapper"></a>条件构造器wapper</h4><blockquote><h5 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h5></blockquote><p><a href="https://baomidou.com/pages/10c804/#abstractwrapper">    条件构造器 | MyBatis-Plus (baomidou.com)</a></p><blockquote><h5 id="queryWapper和lambdaQueryWapper的区别"><a href="#queryWapper和lambdaQueryWapper的区别" class="headerlink" title="queryWapper和lambdaQueryWapper的区别"></a>queryWapper和lambdaQueryWapper的区别</h5></blockquote><p>​    前者对应的是数据库字段，后者对应的是实体字段。</p><h5 id="常用条件构造器"><a href="#常用条件构造器" class="headerlink" title="常用条件构造器"></a>常用条件构造器</h5><h6 id="eq"><a href="#eq" class="headerlink" title="eq"></a>eq</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span><span class="token comment">//等于 =</span><span class="token comment">//例: eq("name", "老王")---&gt;name = '老王'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="in"><a href="#in" class="headerlink" title="in"></a>in</h6><pre class="line-numbers language-none"><code class="language-none">in(R column, Collection&lt;?&gt; value)in(boolean condition, R column, Collection&lt;?&gt; value)in(R column, Object... values)in(boolean condition, R column, Object... values)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="inSql"><a href="#inSql" class="headerlink" title="inSql"></a>inSql</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> condition<span class="token punctuation">,</span> <span class="token class-name">R</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> inValue<span class="token punctuation">)</span><span class="token comment">//字段 IN ( sql语句 )</span><span class="token comment">//例: inSql("age", "1,2,3,4,5,6")---&gt;age in (1,2,3,4,5,6)</span><span class="token comment">//例: inSql("id", "select id from table where id &lt; 3")---&gt;id in (select id from table where id &lt; 3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="like、notLike、likeLeft、LikeRight"><a href="#like、notLike、likeLeft、LikeRight" class="headerlink" title="like、notLike、likeLeft、LikeRight"></a>like、notLike、likeLeft、LikeRight</h6><pre class="line-numbers language-none"><code class="language-none">like(R column, Object val)like(boolean condition, R column, Object val)LIKE '%值%'例: like("name", "王")---&gt;name like '%王%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="mybatis" scheme="http://www.luckyzmj.cn/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>常用注解汇总</title>
    <link href="http://www.luckyzmj.cn/posts/881b3a54.html"/>
    <id>http://www.luckyzmj.cn/posts/881b3a54.html</id>
    <published>2022-04-03T14:03:19.000Z</published>
    <updated>2022-04-07T07:08:36.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Qualifier-如果项目中自定义的注解跟底层一样，则可使用次注解来标识项目中运用。"><a href="#Qualifier-如果项目中自定义的注解跟底层一样，则可使用次注解来标识项目中运用。" class="headerlink" title="@Qualifier    如果项目中自定义的注解跟底层一样，则可使用次注解来标识项目中运用。"></a>@Qualifier    如果项目中自定义的注解跟底层一样，则可使用次注解来标识项目中运用。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="http://www.luckyzmj.cn/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="SpringBoot" scheme="http://www.luckyzmj.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>springSummary</title>
    <link href="http://www.luckyzmj.cn/posts/75ca60a1.html"/>
    <id>http://www.luckyzmj.cn/posts/75ca60a1.html</id>
    <published>2022-04-02T15:09:56.000Z</published>
    <updated>2022-04-07T07:08:36.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="什么是CAP理论"><a href="#什么是CAP理论" class="headerlink" title="什么是CAP理论"></a>什么是CAP理论</h4><p>CAP原则又称CAP定理，指的是在一个分布式系统中，<a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7/9840083">一致性</a>（Consistency）、<a href="https://baike.baidu.com/item/%E5%8F%AF%E7%94%A8%E6%80%A7/109628">可用性</a>（Availability）、<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7/23734073">分区容错性</a>（Partition tolerance）。</p><p>CAP 原则指的是，这三个<a href="https://baike.baidu.com/item/%E8%A6%81%E7%B4%A0/5261200">要素</a>最多只能同时实现两点，不可能三者兼顾。一般保证容错性，一致性和可用性二选一。</p><p>一致性（C）：在<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336">分布式系统</a>中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p><p>可用性（A）：保证每个请求不管成功或者失败都有响应。</p><p>分区容忍性（P）：系统中任意信息的丢失或失败不会影响系统的继续运作。</p><h4 id="HTTP和RPC的概述"><a href="#HTTP和RPC的概述" class="headerlink" title="HTTP和RPC的概述"></a>HTTP和RPC的概述</h4><p>Http是根据网络定义的，具有标准语义的通用接口，里面的资源都可被解释。对系统的可用性、伸缩性有更好的支持，而RPC是根据语言的API来定义的。</p><p>RPC主要用于公司内部的服务调用，性能消耗低，传输效率高，服务治理方便。HTTP主要用于对外的异构环境，浏览器接口调用，APP接口调用，第三方接口调用等。</p><h4 id="HTTP和RPC的异同"><a href="#HTTP和RPC的异同" class="headerlink" title="HTTP和RPC的异同"></a>HTTP和RPC的异同</h4><ul><li><p>RPC，可以基于TCP协议，也可以基于HTTP协议<br>HTTP，基于HTTP协议</p></li><li><p>RPC，使用自定义的TCP协议，可以让请求报文体积更小，或者使用HTTP2协议，也可以很好的减少报文的体积，提高传输效率<br>HTTP，如果是基于HTTP1.1的协议，请求中会包含很多无用的内容，如果是基于HTTP2.0，那么简单的封装一下是可以作为一个RPC来使用的，这时标准RPC框架更多的是服务治理性能消耗，主要在于序列化和反序列化的耗时</p></li><li><p>RPC，可以基于thrift实现高效的二进制传输<br>HTTP，大部分是通过json来实现的，字节大小和序列化耗时都比thrift要更消耗性能负载均衡</p></li><li><p>RPC，基本都自带了负载均衡策略<br>HTTP，需要配置Nginx，HAProxy来实现<br>服务治理（下游服务新增，重启，下线时如何不影响上游调用者）</p></li><li><p>RPC，能做到自动通知，不影响上游<br>HTTP，需要事先通知，修改Nginx/HAProxy配置        </p></li></ul><h4 id="SpringCloud和Dubbo的区别"><a href="#SpringCloud和Dubbo的区别" class="headerlink" title="SpringCloud和Dubbo的区别"></a>SpringCloud和Dubbo的区别</h4><p>微服务的核心要素在于服务的发现、注册、路由、熔断、降级、分布式配置。</p><p><img src="https://i.loli.net/2021/05/18/izUmO8QhI1M63PF.jpg" alt="微服务区别.jpg"></p><p>综合上述：dubbo属于早期的微服务框架，少了很多组件。而SpringCloud是一种生态，即把微服务架构所需要的组件都整合在一起使用起来更加方面。</p><p>dubbo用的是RPC进行通讯，而SpringCLoud用的是HTTP进行通讯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="总结" scheme="http://www.luckyzmj.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="spring" scheme="http://www.luckyzmj.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>springCloud</title>
    <link href="http://www.luckyzmj.cn/posts/103896d2.html"/>
    <id>http://www.luckyzmj.cn/posts/103896d2.html</id>
    <published>2022-04-01T12:37:34.000Z</published>
    <updated>2022-04-07T07:08:36.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h4><p>对于微服务，其实没有太多统一定义，通常而言对于微服务架构来说它只是一个架构风格，就是把所有的应用分成一个个独立的模块，每个独立的模块能运行在自己的进程中并各模块之间相互协助，相互通信去完成一个具体的业务。</p><h4 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h4><blockquote><p>优点</p></blockquote><ul><li>每个微服务都很小，这样能聚焦一个指定的业务功能或业务需求</li><li>微服务能够被小团队单独开发，这个小团队是2到5人的开发人员组成</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的</li><li>微服务能使用不同的语言开发</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值</li><li>微服务允许你利用融合最新技术</li><li>微服务只是业务逻辑的代码，不会和HTML,CSS 或其他界面组件混合</li></ul><blockquote><p>缺点</p></blockquote><ul><li>开发人员要处理系统的复杂性</li><li>随着服务器的增加，运维的工作压力增大</li><li>系统部署之间存在依赖关系</li><li>服务之间通信需要成本</li><li>数据的一致性问题</li><li>性能的监控等</li></ul><h4 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是SpringCloud</h4><p>SpringCloud是一种微服务框架，也可以说是一种生态，它把微服务之间所需要解决的问题的组件融合在一起来实现微服务架构通信，数据传输等。</p><h4 id="SpringBoot和SpringCloud的区别"><a href="#SpringBoot和SpringCloud的区别" class="headerlink" title="SpringBoot和SpringCloud的区别"></a>SpringBoot和SpringCloud的区别</h4><ul><li>Sprinboot专注于开发单体微服务项目</li><li>SpringCloud是关注全局的微服务协调框架，它把Springboot开发的单体微服务项目整合在一起，并为各个服务之间提供通信、注册和发现、断路器、路由等</li><li>Springboot可以离开SpringCloud称为一个单体的服务，但是SpringCloud必须依赖于Springboot开发</li><li>Springboot专注为于个体，SpringCloud专注于服务治理</li></ul><h4 id="SpringCloud-Netflix的组件"><a href="#SpringCloud-Netflix的组件" class="headerlink" title="SpringCloud Netflix的组件"></a>SpringCloud Netflix的组件</h4><h5 id="Eureka服务注册及发现"><a href="#Eureka服务注册及发现" class="headerlink" title="Eureka服务注册及发现"></a>Eureka服务注册及发现</h5><blockquote><p>Eureka的两大组件Eureka Server、Eureka Client</p></blockquote><p>Eureka Server是提供节点服务的，每个服务启动之后会在Eureka Server中进行注册，服务节点的信息也可通过界面直观的感受</p><p>Eureka Client是一个java客户端，用来检测服务是否有效，即每30秒Eureka Client会想Eureka Server发送一个心跳，如果Eureka Server在多个周期内没有接收到心跳，Eureka Server则会把该服务从注册中心移除。默认周期为90s。</p><blockquote><p>获取Eureka Serve中的以已注册的信息</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@RestController@RequestMapping("/discover")public class DiscoverController {    @Autowired    private DiscoveryClient client;    @GetMapping("/get")    public Object getDiscover(){        //获取所有的服务        List&lt;String&gt; list = client.getServices();        list.forEach(s -&gt; System.out.println(s));//获取某个服务的信息        List&lt;ServiceInstance&gt; provide8081 = client.getInstances("PROVIDE8081");        provide8081.forEach(serviceInstance -&gt; System.out.println(                "host:"+serviceInstance.getHost()+"----------"                +"instance:"+serviceInstance.getInstanceId()+"----------"                +"port:"+serviceInstance.getPort()+"----------"                +"uri:"+serviceInstance.getUri()+"----------"                +"metadata:"+serviceInstance.getMetadata()        ));        return this.client;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Eureka和zookeeper的区别</p></blockquote><p>Eureka利用的是CAP理论中AP原则，即可用性和容错性。会造成注册中心返回的是几分钟之前的信息。</p><p>zookeeper是利用CAP理论中的CP原则，即一致性和容错性。如果主服务器master宕机之后，会存在一个选举的过程，次选举过程会造成服务不可用。</p><p>两则相比之下，对于大部分业务逻辑来说，高可用性更强于一致性。</p><h5 id="Ribbon负载均衡工具"><a href="#Ribbon负载均衡工具" class="headerlink" title="Ribbon负载均衡工具"></a>Ribbon负载均衡工具</h5><p>ribbon是NetFlix的开源项目，提供负载均衡算法，将各个中间件信息链接在一起，简单的来说就是列出所有的机器，通过某种算法实现负载均衡。</p><blockquote><p>ribbon和nginx的区别</p></blockquote><p>Nginx 是客户端所有请求统一交给 nginx 进行实现负载均衡请求转发，属于服务器端负载均衡。是一种<strong>集中式</strong>的负载均衡器。即请求由 nginx 服务器端进行转发。</p><p>Ribbon 是从 eureka 注册中心服务器端上获取服务注册信息列表，缓存到本地，然后在本地实现轮询负载均衡策略。即在<strong>客户端</strong>实现负载均衡。</p><p>Nginx 适合于<strong>服务器端</strong>实现负载均衡 比如 Tomcat</p><p>Ribbon 适合与在微服务中 RPC 远程调用实现本地服务负载均衡，比如 Dubbo、SpringCloud 中都是采用本地负载均衡。</p><blockquote><p>常用的负载均衡算法    </p></blockquote><ul><li>轮询算法                  默认</li><li>随机算法</li><li>权重算法</li></ul><p>负载均衡算法的实现接口为IRule类，我们可以自定义算法来做负载均衡。</p><blockquote><p>ribbon和feign的区别</p></blockquote><ul><li><p>启动类使用的注解不同，Ribbon用的是@RibbonClient，Feign用的是@EnableFeignClients。</p></li><li><p>服务的指定位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。</p></li><li><p>调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。</p></li></ul><p>总的来说feign是面向接口编程更符合开发人员的思想，而ribbon+restTemplate对http进行了封装，形成了一套模板化带调用方式。</p><h5 id="hystrix服务熔断"><a href="#hystrix服务熔断" class="headerlink" title="hystrix服务熔断"></a>hystrix服务熔断</h5><blockquote><p>hystrix的简介</p></blockquote><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，已提高分布式系统的弹性。</p><p>“ 断路器 ” 本身是一种开关装置，当某个服务单元发送故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><blockquote><p>hystrix的特性</p></blockquote><ul><li><strong>服务熔断：</strong>熔断是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务不可用或者响应实践太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定的阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是<code>HystrixCommand</code>。</li><li><strong>服务降级：</strong>降级的目的是为了解决整体项目的压力，而牺牲掉某一服务模块而采取的措施。</li><li><strong>服务监控：</strong>可视化页面观察服务的信息</li></ul><p><img src="https://i.loli.net/2021/05/20/Cc4rno9ZPTxitQL.png" alt="服务监控.png"></p><blockquote><p>服务熔断和服务降级的区别</p></blockquote><ul><li><p><strong>触发原因不太一样</strong>，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</p></li><li><p><strong>管理目标的层次不太一样</strong>，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</p></li></ul><h5 id="zuul服务网关（已停用）"><a href="#zuul服务网关（已停用）" class="headerlink" title="zuul服务网关（已停用）"></a>zuul服务网关（已停用）</h5><ul><li>提供统一服务入口，微服务对前台透明</li><li>聚合后台服务，节省流量，提升性能</li><li>安全，过滤，流控等API管理功能</li><li>提供统一服务出口，解耦</li></ul><h5 id="SpringCloud-gateway服务网关"><a href="#SpringCloud-gateway服务网关" class="headerlink" title="SpringCloud gateway服务网关"></a>SpringCloud gateway服务网关</h5><h6 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h6><p> 网关是整个微服务API请求的入口，负责拦截所有请求，分发到服务上去。可以实现日志拦截、权限控制、解决跨域问题、限流、熔断、负载均衡，隐藏服务端的ip，黑名单与白名单拦截、授权等，常用的网关有zuul(netflix的，但是已经停更了)和spring cloud gateway (springcloudalibaba)。这里主要讲springcloud gateway，springcloud gateway是一个全新的项目,其基于spring5.0 以及springboot2.0和项目Reactor等技术开发的网关,其主要的目的是为微服务架构提供一种简单有效的API路由管理方式.</p><h6 id="过滤器和网关的对比"><a href="#过滤器和网关的对比" class="headerlink" title="过滤器和网关的对比"></a>过滤器和网关的对比</h6><p>过滤器：对单个服务器的请求进行拦截控制</p><p>网关：对所有的服务器的请求进行拦截控制</p><h6 id="zuul和spring-cloud-gateway的对比"><a href="#zuul和spring-cloud-gateway的对比" class="headerlink" title="zuul和spring cloud gateway的对比"></a>zuul和spring cloud gateway的对比</h6><p>zuul：是Netflix的，是基于servlet实现的，阻塞式的api即基于servlet实现，不支持长连接。</p><p>gateway：是springcloud自己研制的微服务网关，是基于Spring5构建，能够实现响应式非阻塞式的Api，支持长连接</p><h6 id="网关与nginx区别"><a href="#网关与nginx区别" class="headerlink" title="网关与nginx区别"></a>网关与nginx区别</h6><p>相同点：都是可以实现对api接口的拦截，负载均衡、反向代理、请求过滤等，可以实现和网关一样的效果。</p><p>不同点：Nginx采用C语言编写，Gateway属于Java语言编写的， 能够更好让我们使用java语言来实现对请求的处理。</p><p>Nginx 属于服务器端负载均衡器。</p><p>Gateway 属于本地负载均衡器。 </p><h6 id="gateway的组成"><a href="#gateway的组成" class="headerlink" title="gateway的组成"></a>gateway的组成</h6><p>路由 : 网关的基本模块，有ID，目标URI，一组断言和一组过滤器组成</p><p>断言：就是访问该旅游的访问规则，可以用来匹配来自http请求的任何内容，例如headers或者参数</p><p>过滤器：这个就是我们平时说的过滤器，用来过滤一些请求的，gateway有自己默认的过滤器，具体请参考官网，我们也可以自定义过滤器，但是要实现两个接口，ordered和globalfilter</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="框架" scheme="http://www.luckyzmj.cn/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="springCloud" scheme="http://www.luckyzmj.cn/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>redis进阶</title>
    <link href="http://www.luckyzmj.cn/posts/d6c4a96f.html"/>
    <id>http://www.luckyzmj.cn/posts/d6c4a96f.html</id>
    <published>2022-03-30T02:16:21.000Z</published>
    <updated>2022-04-07T07:08:36.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p>Redis事务本质是一种命令的集合，一个事务中的所有命令都会被序列化，且按照顺序执行！</p><p>Redis事务没有隔离级别的概念，即没有mysql的脏读等事情发生</p><p>Redis的单条命令是具有原子性的，多条命令不具有原子性</p><ul><li>开启事务（multi）</li><li>命令入队（。。。。。）</li><li>执行事务（exec）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#一个完整的事务执行过程</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI<span class="token comment">#开启一个事务</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1<span class="token comment">#在事务中执行操作</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2 QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> get k2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token comment">#执行事务</span><span class="token number">1</span><span class="token punctuation">)</span> OK<span class="token number">2</span><span class="token punctuation">)</span> OK<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">#如果在事务中做了取消操作，则所有操作都不会执行，此时具有原子性127.0.0.1:6379&gt; MULTI#开启事务OK127.0.0.1:6379(TX)&gt; set k1 v1 #执行操作QUEUED127.0.0.1:6379(TX)&gt; set k2 v2QUEUED127.0.0.1:6379(TX)&gt; DISCARD#取消事务OK127.0.0.1:6379&gt; get k1(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编译时异常，即系统检测出的异常，此时具有原子性</span><span class="token number">27.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI<span class="token comment">#开启事务</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1<span class="token comment">#执行正确操作</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> getset k1<span class="token comment">#执行错误操作</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token builtin class-name">command</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> get k2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span> <span class="token comment">#执行事务时提示所有操作都未成功</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#运行时异常，即系统运行过程中才检测到异常，此时不具有原子性</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTI<span class="token comment">#开启事务</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1<span class="token comment">#执行正确操作</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr k1<span class="token comment">#执行错误操作，向String中自增</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> get k2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token comment">#执行事务，则提示第三步错误，其他都正常运行</span><span class="token number">1</span><span class="token punctuation">)</span> OK<span class="token number">2</span><span class="token punctuation">)</span> OK<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redis的监控"><a href="#redis的监控" class="headerlink" title="redis的监控"></a>redis的监控</h3><blockquote><p>乐观锁是什么</p></blockquote><p>无论什么时候都认为不会出现问题，所以不用上锁，更新数据的适合判断一下是否有人修改过数据即可。</p><blockquote><p>悲观锁是什么</p></blockquote><p>无论什么时候都认为会出现问题，所以执行过程中都会增加一个锁。效率过慢</p><blockquote><p>redis的乐观锁用watch进行表示</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#一个正常的操作</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> money <span class="token number">100</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> out <span class="token number">0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money<span class="token comment">#开启监控</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MULTIOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> decrby money <span class="token number">60</span><span class="token comment">#减少60</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> INCRBY out <span class="token number">60</span><span class="token comment">#增加60</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">40</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">#一个错误信息的执行过程#线程1127.0.0.1:6379&gt; WATCH money#监控moneyOK127.0.0.1:6379&gt; MULTIOK127.0.0.1:6379(TX)&gt; DECRby money 10#对money进行操作QUEUED127.0.0.1:6379(TX)&gt; INCRBY out 10QUEUED127.0.0.1:6379(TX)&gt; exec #执行事务不成功(nil)#线程2127.0.0.1:6379&gt; set money 1000#线程2修改了监控的moneyOK127.0.0.1:6379&gt; UNWATCH#取消所有监控信息OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置redis的密码"><a href="#设置redis的密码" class="headerlink" title="设置redis的密码"></a>设置redis的密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config <span class="token builtin class-name">set</span> requirepass <span class="token number">123456</span><span class="token comment">#设置redis的密码</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">exit</span>root@5a78b143c447:/data<span class="token comment"># redis-cli</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> auth <span class="token number">123456</span><span class="token comment">#密码认证</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span>PONG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RDB（redis-database）持久化"><a href="#RDB（redis-database）持久化" class="headerlink" title="RDB（redis database）持久化"></a>RDB（redis database）持久化</h3><blockquote><p>触发机制产生dump.rdb文件</p></blockquote><ul><li>配置文件中设置的save规则如果满足条件即可触发，例如save 900 1 （如果900s内存在一次更改或添加操作）</li><li>执行flushAll命令，也会触发持久化配置产生rdb文件</li><li>退出redis也可产生rdb文件。</li></ul><blockquote><p>如何恢复rdb文件</p></blockquote><p>找到rdb文件需识别的目录，启动redis的适合会自动加载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config get <span class="token function">dir</span><span class="token comment">#输出此命令可查看rdb文件所在目录</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"dir"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"/etc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性不高</li></ol><p><strong>缺点</strong></p><ol><li>需要一定的时间间隔进程操作，如果redis意外down了，则最后一次修改的数据就持久化不成功。</li><li>fork进行的时候，暂用一定的内存空间。</li></ol><h3 id="AOF（append-only-file）持久化"><a href="#AOF（append-only-file）持久化" class="headerlink" title="AOF（append only file）持久化"></a>AOF（append only file）持久化</h3><p>由于redis的默认持久化方式为RDB，需修改配置文件中的APPENDONLY 为YES则表示AOF持久化</p><p>AOF持久化产生的文件名为appendOnly.aof文件</p><p>AOF持久化的方式有三种：</p><ul><li>appendfSync    always        每次修改都会sync，比较消耗性能</li><li>appendfSync    everysec    每秒执行一次sync，可能会丢失这1s的数据，默认的方式</li><li>appendfSync    no               不执行sync，操作系统回自己同步数据，速度最快</li></ul><p><strong>优缺点</strong></p><ol><li>相对于rdb的方式，数据的完整性更好</li><li>相对于rdb的方式，aof的文件远大于rdb文件，修复速度也比rdb慢</li><li>运行效率也比rdb慢</li></ol><h3 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h3><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH"># 消息接收者127.0.0.1:6379&gt; SUBSCRIBE wei #设置接收数据的频道weiReading messages... (press Ctrl-C to quit)1) "subscribe"2) "wei"3) (integer) 11) "message"#下三步则为接收到数据信息2) "wei"3) "123232"#消息发送者127.0.0.1:6379&gt; PUBLISH wei 123232#发送到wei频道信息(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h3><blockquote><p>主从复制的概念</p></blockquote><p>主从复制试讲一台Redis服务器复制到其他服务器，前者称为主节点（master/leader),后者称为从节点（slave/follower）;数据的复制是单向的，只能从主节点到从节点，其中master为主，slave为从。</p><blockquote><p>主从复制的作用是什么</p></blockquote><ol><li>数据冗余：实现了数据的热备份，是持久化之外的一种数据冗余模式</li><li>故障恢复：当主节点出现问题时，可以有从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，从节点提供读服务，分担服务器负载。</li><li>高可用：除了上述作用外，主从复制还采用了哨兵和集群模式，实现了redis的高可用。</li></ol><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">127.0.0.1:6379&gt; INFO replication#查看当前redis的机器信息# Replicationrole:master#角色信息（主机）connected_slaves:0#从机数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication<span class="token comment"># Replication</span>role:master<span class="token comment">#主机标识</span>connected_slaves:1<span class="token comment">#链接的从机数目</span>slave0:ip<span class="token operator">=</span><span class="token number">47.101</span>.169.95,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">14</span>,lag<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#从机的基本信息</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication<span class="token comment"># Replication</span>role:slave<span class="token comment">#从机</span>master_host:47.100.3.247<span class="token comment">#连接到的主机信息</span>master_port:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><blockquote><p>哨兵模式的概念</p></blockquote><p>主从切换技术的方法是：当主服务器down后，需要手动选择一台服务器作为主服务器，需要人工干预，费时费力，并且还会造成一段时间的不可用，因此产生一个全新的自动化模式sentinel来解决这个问题。如果主机down，从机则会根据一定的算法选择从机做为主机。如果主机在连接则只能作为从机，主机还是原来推举出来的。</p><blockquote><p>哨兵的作用</p></blockquote><ul><li>通过发送命令，检测主服务器和从服务器的运行状态</li><li>当master宕机，会自动将slave转换为master，然后通知其他服务器，修改配置文件，让他们切换主机。</li><li>哨兵也可能存在down的可能，因此会布置多个哨兵互相监控。</li></ul><blockquote><p>哨兵配置</p></blockquote><p>1、配置sentinel.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sentinel monitor myredis host port  1   </span>sentinel monitor myredis <span class="token number">47.100</span>.3.247 <span class="token number">6379</span>  <span class="token number">1</span><span class="token comment">#1表示主机挂了，slave投票谁最多谁成为主机</span><span class="token comment">#具体的配置后续再了解，目前只配置最基础的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、启动哨兵</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">redis-sentinel sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong></p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置有点都拥有</li><li>主从可以切换，故障可以转移，系统的可用性会更好</li><li>哨兵模式是主从模式的升级，手动改为自动更加的健壮</li></ol><p><strong>缺点：</strong></p><ol><li>哨兵模式的扩容非常麻烦</li><li>配置相对来说比较麻烦</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="redis" scheme="http://www.luckyzmj.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis特殊数据类型</title>
    <link href="http://www.luckyzmj.cn/posts/1e9fc50d.html"/>
    <id>http://www.luckyzmj.cn/posts/1e9fc50d.html</id>
    <published>2022-03-30T00:28:15.000Z</published>
    <updated>2022-04-07T07:08:36.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h3><p>应用场景: 朋友圈定位、附近的距离、地理位置的计算</p><p>常用命令：</p><p>geoadd 添加经纬度信息</p><p>geopos 查询经纬度信息</p><p>geodist 查询两个位置直接的直线距离</p><p>geoRadius    查询某个坐标下（经度、维度）的所有位置信息</p><p>georadiusBymember    查询某个坐标下（集合内的数据）的位置信息</p><p>geohash    返回某个城市的一维数据，11位</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">#顺序为key、经度、维度、城市#有效的经度从-180度到180度。#有效的纬度从-85.05112878度到85.05112878度。#如果超过则会提示如下错误127.0.0.1:6379&gt; GEOADD china:city 116.405289 39.904987 beijing#添加地理位置信息(integer) 1127.0.0.1:6379&gt; GEOADD china:city 117.190186 39.125595 tianqing 114.502464  38.045475 shijiazhuang 126.642464 45.756966 haerbing 121.472641 31.231707 shanghai(integer) 4127.0.0.1:6379&gt; GEOADD china:city 113.374375 23.368923 guangzhou(integer) 1127.0.0.1:6379&gt; keys *1) "china:city"127.0.0.1:6379&gt; GEOADD china:city    23.368923  113.374375  guangzhou#位置信息添加错误提示(error) ERR invalid longitude,latitude pair 23.368923,113.374375127.0.0.1:6379&gt; GEOPOS china:city beijing tianqing#查看当前经纬度的值1) 1) "116.40528827905654907"   2) "39.90498588819134085"2) 1) "117.19018846750259399"   2) "39.12559461779084558"#获取两人之间的距离127.0.0.1:6379&gt; GEODIST china:city beijing tianqing km#获取两地之间的距离，单位为km"109.7753"#查询附近的人key、经度、维度、半径、单位、直接距离、总数127.0.0.1:6379&gt; GEORADIUS china:city 100 30 1000 km withdist count 3#查询某个经纬度内半径为1000km的地点3个位置(empty array)#查询以某个集合内的位置作为基础半径内的位置信息127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 500 km withdist1) 1) "shijiazhuang"   2) "264.2750"2) 1) "tianqing"   2) "109.7753"3) 1) "beijing"   2) "0.0000"#获取某个城市的一维字符串127.0.0.1:6379&gt; GEOHASH china:city beijing1) "wx4g0b7xru0"127.0.0.1:6379&gt; GEOHASH china:city shanghai guangzhou1) "wtw3sjt9vs0"2) "ws0sgyhty70"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>地理位置的底层实现是根据zset进行操作的。</p></blockquote><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">127.0.0.1:6379&gt; ZRAnge china:city 0 -1#查询所有的经纬度信息1) "guangzhou"2) "shanghai"3) "shijiazhuang"4) "tianqing"5) "beijing"6) "haerbing"127.0.0.1:6379&gt; zrem china:city beijing#删除某个经纬度信息(integer) 1127.0.0.1:6379&gt; ZRAnge china:city 0 -11) "guangzhou"2) "shanghai"3) "shijiazhuang"4) "tianqing"5) "haerbing"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hyperloglog数据类型"><a href="#Hyperloglog数据类型" class="headerlink" title="Hyperloglog数据类型"></a>Hyperloglog数据类型</h3><p>优点：占用的内存是固定的，可以存取2的64个不同的元素，只需要12kb的内存。</p><p>缺点：是有0.81%的错误率，一般可以忽略不计。</p><p>目的：处理集合中不同的元素总数，跟set的用途一致。</p><ul><li>pfadd         添加元素</li><li>pfcount      计算元素总数</li><li>pfmegre    合并两个元素为一个全新的元素</li></ul><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">127.0.0.1:6379&gt; PFADD key a b c d e f g h i j k#向集合中添加元素(integer) 1127.0.0.1:6379&gt; PFCOUNT key#查看当前集合的元素总数(integer) 11127.0.0.1:6379&gt; PFADD key1 f f  n f e p o #重复元素的按1计算(integer) 1127.0.0.1:6379&gt; PFCOUNT key1(integer) 5127.0.0.1:6379&gt; PFMERGE key2 key key1#合并两个key的元素为最新的keyOK127.0.0.1:6379&gt; PFCOUNT key2(integer) 14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BItMaps数据类型"><a href="#BItMaps数据类型" class="headerlink" title="BItMaps数据类型"></a>BItMaps数据类型</h3><p>表示位运算，一般应用场景是统计某个事情的真总数，以判断是否成立，例如：统计某员工一个月内的打卡次数</p><ul><li>setbit     key   offset  0/1           给某个key设置一个事件，用0表示假、1表示真</li><li>getbit     key   offset                   获取这个key值的事件状态即0/1</li><li>bitcount     key                            查询某个key的真事件的总数</li></ul><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">127.0.0.1:6379&gt; setbit key 1 0#设置某个元素的某种事件值是0或者1(integer) 0127.0.0.1:6379&gt; setbit key 2 1(integer) 0127.0.0.1:6379&gt; setbit key 2 0(integer) 1127.0.0.1:6379&gt; getbit key 2#获取该元素的事件状态(integer) 0127.0.0.1:6379&gt; setbit key 3 0(integer) 0127.0.0.1:6379&gt; BITCOUNT key#获取某个元素的为1的时间总数(integer) 0127.0.0.1:6379&gt; setbit key 3 1(integer) 0127.0.0.1:6379&gt; BITCOUNT key(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="redis" scheme="http://www.luckyzmj.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis常用命令</title>
    <link href="http://www.luckyzmj.cn/posts/c3982ec0.html"/>
    <id>http://www.luckyzmj.cn/posts/c3982ec0.html</id>
    <published>2022-03-29T13:42:36.000Z</published>
    <updated>2022-04-07T07:08:36.497Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="redis的命令查找网址"><a href="#redis的命令查找网址" class="headerlink" title="redis的命令查找网址"></a>redis的命令查找网址</h3><p><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h3 id="redis的基本命令"><a href="#redis的基本命令" class="headerlink" title="redis的基本命令"></a>redis的基本命令</h3><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; FLUSHALL#清空所有数据库OK127.0.0.1:6379&gt; set name '123'#设置key为name的值OK127.0.0.1:6379&gt; set age 1#设置key为age的值OK127.0.0.1:6379&gt; get name#获取key为name的值，如果不存在key值则返回nil。"123"127.0.0.1:6379&gt; gea age(error) ERR unknown command `gea`, with args beginning with: `age`, 127.0.0.1:6379&gt; get age#获取key为age的值"1"127.0.0.1:6379&gt; EXISTS naem#查询是否存在此key值，存在返回1，否则返回0(integer) 0127.0.0.1:6379&gt; EXISTS name(integer) 1127.0.0.1:6379&gt; move name 1#移除key值，成功返回1，失败返回0(integer) 1127.0.0.1:6379&gt; keys *#查询当前存在的key值1) "age"127.0.0.1:6379&gt; EXPIRE age 15#设置key值得过期时间(integer) 1127.0.0.1:6379&gt; ttl name(integer) -2127.0.0.1:6379&gt; ttl age#查看当前key的剩余时间，如果key值不存在则返回-2(integer) 7127.0.0.1:6379&gt; ttl age(integer) 4127.0.0.1:6379&gt; ttl age(integer) -2127.0.0.1:6379&gt; type age#查看key值得返回类型String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String基本数据类型"><a href="#String基本数据类型" class="headerlink" title="String基本数据类型"></a>String基本数据类型</h3><pre class="line-numbers language-SHELl" data-language="SHELl"><code class="language-SHELl">127.0.0.1:6379&gt; FLUSHALLOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; set key1 1OK127.0.0.1:6379&gt; get key1"1"127.0.0.1:6379&gt; EXISTS key1(integer) 1127.0.0.1:6379&gt; EXISTS key1(integer) 1127.0.0.1:6379&gt; EXISTS key2(integer) 0127.0.0.1:6379&gt; APPEND key1 2#给某个key追加一个值，如果当前值不存在则创建当前key，返回的当前value的长度(integer) 2127.0.0.1:6379&gt; keys *1) "key1"127.0.0.1:6379&gt; get key1"12"127.0.0.1:6379&gt; STRLEN key1#查看当前key的长度(integer) 2127.0.0.1:6379&gt; append key1 '321321'(integer) 8127.0.0.1:6379&gt; STRLEN key1(integer) 8127.0.0.1:6379&gt; get key1"12321321"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> view <span class="token number">0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get view<span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr view<span class="token comment">#给某个字段字段增加1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr view<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr view<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decr view<span class="token comment">#给某个字段自动减少1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBY view <span class="token number">10</span><span class="token comment">#给某个字段增加10</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBY view <span class="token number">10</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby view <span class="token number">5</span><span class="token comment">#给某个字段减少5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">17</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr key1<span class="token comment">#如果自增的数据不是Integer类型则提示错误</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; set key1 abcdeOK127.0.0.1:6379&gt; get key1"abcde"127.0.0.1:6379&gt; GETRANGE key1 0 3#获取下表0-3的数据"abcd"127.0.0.1:6379&gt; GETRANGE key1 0 -1 #获取全部的数据"abcde"127.0.0.1:6379&gt; SETRANGE key1 0 111#从下表为0开始替换数据，长度为值得长度(integer) 5127.0.0.1:6379&gt; get key1 "111de"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">clear</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"111de"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETNX key1 <span class="token string">'abcde'</span><span class="token comment">#设置某个值如果存在则不替换，不存在则添加</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"111de"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETEX key1 <span class="token number">30</span> abcde<span class="token comment">#设置某个值存在即替换，不存在则添加，且设置其过去时间为30s.</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"abcde"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key1<span class="token comment">#查看剩余时间，如果过期或者不存在则返回0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> FLUSHdbOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset k1 v1 k2 v2 k3 v3<span class="token comment">#设置多个key/value值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset k1 v1 k4 v4<span class="token comment">#设置多个，如果存在则替换，不存在则添加</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"k4"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MSETNX k1 v1 k5 v5<span class="token comment">#设置多个，如果存在则全部失败，因为redis具有原子性。</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"k4"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k5<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GETSET db redis<span class="token comment">#获取key值并设置key值，返回值为实现get的key值</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get db<span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset db mysql<span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get db<span class="token string">"mysql"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List基本数据类型"><a href="#List基本数据类型" class="headerlink" title="List基本数据类型"></a>List基本数据类型</h3><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; FLUSHdbOK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; LPUSH list a b c#从左侧插入一直list，返回的是当前集合的长度(integer) 3127.0.0.1:6379&gt; lpush list d e(integer) 5127.0.0.1:6379&gt; RPUSH list f g#从右侧插入一个list(integer) 7127.0.0.1:6379&gt; LRANGE list 0 -1 #获取list的所有值1) "e"2) "d"3) "c"4) "b"5) "a"6) "f"7) "g"127.0.0.1:6379&gt; LRANGE list 1  5#获取list下标为1-5的值1) "d"2) "c"3) "b"4) "a"5) "f"127.0.0.1:6379&gt; RPOP list #移除右边的第一个元素"g"127.0.0.1:6379&gt; RPOP list 2#移除右边的2个元素1) "f"2) "a"127.0.0.1:6379&gt; LPOP list 2#移除左边边的2个元素1) "b"2) "c"127.0.0.1:6379&gt; LRANGE list 0 -11) "e"2) "d"127.0.0.1:6379&gt; LINDEX list 1#获取当前集合下标为1的元素"d"127.0.0.1:6379&gt; LLEN list#获取list集合的长度(integer) 2127.0.0.1:6379&gt; LRANGE list 0 -11) "e"2) "d"127.0.0.1:6379&gt; LPUSH list e#王list中添加一个重复元素(integer) 3127.0.0.1:6379&gt; LREM list 2 e#删除list中为e的元素，且值的个数为2(integer) 2127.0.0.1:6379&gt; LRANGE list 0 -11) "d"127.0.0.1:6379&gt; FLUSHdb OK127.0.0.1:6379&gt; keys *(empty array)127.0.0.1:6379&gt; clear127.0.0.1:6379&gt; lpush list hello1(integer) 1127.0.0.1:6379&gt; lpush list hello2(integer) 2127.0.0.1:6379&gt; lpush list hello2(integer) 3127.0.0.1:6379&gt; lpush list hello3(integer) 4127.0.0.1:6379&gt; lpush list hello4(integer) 5127.0.0.1:6379&gt; LREM list 1 hello 2(error) ERR wrong number of arguments for 'lrem' command127.0.0.1:6379&gt; LREM list 1 hello2(integer) 1127.0.0.1:6379&gt; LRANGE list 0 -11) "hello4"2) "hello3"3) "hello2"4) "hello1"127.0.0.1:6379&gt; LPUSH list hello5(integer) 5127.0.0.1:6379&gt; LRANGE list 0 -11) "hello5"2) "hello4"3) "hello3"4) "hello2"5) "hello1"127.0.0.1:6379&gt; LTRIM list 1 2#截取当前key的下标为1到2的值OK127.0.0.1:6379&gt; LRANGE list 0 -11) "hello4"2) "hello3"127.0.0.1:6379&gt; RPOPLPUSH list mylist#截取list右侧第一个元素把他存入到mylist的最左侧"hello3"127.0.0.1:6379&gt; LRANGE list 0 -1#查看list的所有值1) "hello4"127.0.0.1:6379&gt; LRANGE mylist 0 -1#查看mylist的所有值1) "hello3"127.0.0.1:6379&gt; FLUSHdbOK127.0.0.1:6379&gt; EXISTS list#查看是否存在当前key值(integer) 0127.0.0.1:6379&gt; lset list 0 redis#往当前key值中set一个下标为0的数据，如果不存在则提示错误，存在则替换(error) ERR no such key127.0.0.1:6379&gt; LPUSH list mysql(integer) 1127.0.0.1:6379&gt; lset list 0 redisOK127.0.0.1:6379&gt; LRANGE list 0 -11) "redis"127.0.0.1:6379&gt; lset list 1 redis(error) ERR index out of range##############################################127.0.0.1:6379&gt; LRANGE list 0 -11) "redis"127.0.0.1:6379&gt; lpush list myql(integer) 2127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "redis"127.0.0.1:6379&gt; LINSERT list before 'mysql' mysql1(integer) -1127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "redis"127.0.0.1:6379&gt; LINSERT list after 'mysql' mysql1(integer) -1127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "redis"127.0.0.1:6379&gt; keys *1) "list"127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "redis"127.0.0.1:6379&gt; LINSERT list after "redis" "mysql1"#往某个key得之前或之后插入一个值，值不能是下标为0的数据。(integer) 3127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "redis"3) "mysql1"127.0.0.1:6379&gt; LINSERT list before "redis" "mysql1"(integer) 4127.0.0.1:6379&gt; LRANGE list 0 -11) "myql"2) "mysql1"3) "redis"4) "mysql1"127.0.0.1:6379&gt; LINSERT list before "mysql" "mysql1"(integer) -1127.0.0.1:6379&gt; LINSERT list after "mysql" "mysql1"(integer) -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set基本数据类型"><a href="#Set基本数据类型" class="headerlink" title="Set基本数据类型"></a>Set基本数据类型</h3><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; sadd key hello#向key值添加一个元素，如果存在，则返回0，如果不存在则返回1(integer) 1127.0.0.1:6379&gt; sadd key world(integer) 1127.0.0.1:6379&gt; sadd key world(integer) 0127.0.0.1:6379&gt; SMEMBERS key#查看key的所有元素1) "world"2) "hello"127.0.0.1:6379&gt; SISMEMBER key hellp#查看当前key是否存在某个值，如果存在则返回1，不存在则返回0(integer) 0127.0.0.1:6379&gt; SISMEMBER key hello(integer) 1127.0.0.1:6379&gt; scard key#查看当前key的所有值(integer) 2127.0.0.1:6379&gt; SREM key hello#移除某个元素，如果原有元素存在则返回1，原有元素不存在则返回0(integer) 127.0.0.1:6379&gt; SMEMBERS key1) "world"127.0.0.1:6379&gt; Sadd key 1(integer) 1127.0.0.1:6379&gt; Sadd key 2(integer) 1127.0.0.1:6379&gt; Sadd key 3(integer) 1127.0.0.1:6379&gt; SMEMBERS key1) "3"2) "1"3) "world"4) "2"127.0.0.1:6379&gt; SRANDMEMBER key#随机抽取一个key值"world"127.0.0.1:6379&gt; SRANDMEMBER key"world"127.0.0.1:6379&gt; SRANDMEMBER key"1"127.0.0.1:6379&gt; SRANDMEMBER key"2"127.0.0.1:6379&gt; SRANDMEMBER key"world"127.0.0.1:6379&gt; SRANDMEMBER key"3"127.0.0.1:6379&gt; SRANDMEMBER key 2#随机抽取指定个数key值1) "3"2) "2"127.0.0.1:6379&gt; SPOP key#随机删除一个元素，也可跟个数"2"127.0.0.1:6379&gt; SPOP key"1"127.0.0.1:6379&gt; SMEMBERS key1) "3"2) "world"127.0.0.1:6379&gt; FLUSHdbOK127.0.0.1:6379&gt; sadd key 1(integer) 1127.0.0.1:6379&gt; sadd key 2 3 4 5(integer) 4127.0.0.1:6379&gt; SMOVE key key1 2#把某个key的值移动另外一个key中(integer) 1127.0.0.1:6379&gt; keys *1) "key"2) "key1"127.0.0.1:6379&gt; SMEMBERS key1) "1"2) "3"3) "4"4) "5"127.0.0.1:6379&gt; SMEMBERS key11) "2"127.0.0.1:6379&gt; sadd key1 1 3 4(integer) 3127.0.0.1:6379&gt; SMEMBERS key#查询key的value值1) "1"2) "3"3) "4"4) "5"127.0.0.1:6379&gt; SMEMBERS key11) "1"2) "2"3) "3"4) "4"127.0.0.1:6379&gt; sdiff key key1#以key为基准，求两个key的差集1) "5"127.0.0.1:6379&gt; SINTER key key1#求两个集合的交集1) "1"2) "3"3) "4"127.0.0.1:6379&gt; SUNION key key1#求两个集合的并集1) "1"2) "2"3) "3"4) "4"5) "5"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hash的基本命令（key-key-value"><a href="#Hash的基本命令（key-key-value" class="headerlink" title="Hash的基本命令（key-(key-value)"></a>Hash的基本命令（key-(key-value)</h3><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; hset hash key 1#向某个key值中添加一个key/value键值对 其中外层key为hash,内层key为key，value为1(integer) 1127.0.0.1:6379&gt; hset hash key 1 key1 2 key2 3#向key值hash中添加多个元素(integer) 2127.0.0.1:6379&gt; HGET hash key#获取hash中的key的值"1"127.0.0.1:6379&gt; HMGET hash key key1 key2#获取多个值1) "1"2) "2"3) "3"127.0.0.1:6379&gt; HGETALL hash#获取hash的所有key、value信息1) "key"2) "1"3) "key1"4) "2"5) "key2"6) "3"127.0.0.1:6379&gt; HDEL hash key key1#删除hash的key和key1的值(integer) 2127.0.0.1:6379&gt; HGETALL hash1) "key2"2) "3"127.0.0.1:6379&gt; HLEN hash#获取hash的键值对总数(integer) 1127.0.0.1:6379&gt; HEXISTS hash key1#查看hash中是否存在某个key值，如果存在返回1，如果不存在返回0(integer) 0127.0.0.1:6379&gt; HGETALL hash1) "key2"2) "3"127.0.0.1:6379&gt; HEXISTS hash key2(integer) 1127.0.0.1:6379&gt; HKEYS hash#获取hash里面所有的key值1) "key2"127.0.0.1:6379&gt; HVALS hash#获取hash中所有value值1) "3"127.0.0.1:6379&gt; hset hash key3 5(integer) 1127.0.0.1:6379&gt; HKEYS hash1) "key2"2) "key3"127.0.0.1:6379&gt; HVALS hash1) "3"2) "5"127.0.0.1:6379&gt; HINCRBY hash key3 5#给hash的key3值增加5(integer) 10127.0.0.1:6379&gt; HINCRBY hash key3 -1#给hash的key3值增加-1(integer) 9127.0.0.1:6379&gt; HSETNX hash key3 8#如果存在则给某个key添加至，不存在则返回0.(integer) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hset的基础类型"><a href="#Hset的基础类型" class="headerlink" title="Hset的基础类型"></a>Hset的基础类型</h3><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">127.0.0.1:6379&gt; zadd salary 800 lk#向某个元素添加至，其中key为salary,800为位置，即排序的标准(integer) 1127.0.0.1:6379&gt; zadd salary 900 wl 1000 ml(integer) 2127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf#查看所有的value值，1) "lk"2) "wl"3) "ml"127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 900 withscores #查看小于900的value值，显示score1) "lk"2) "800"3) "wl"4) "900"127.0.0.1:6379&gt; ZRAnge salary 0 -1#查询所有key值，无排序，按插入顺序1) "lk"2) "wl"3) "ml"127.0.0.1:6379&gt; ZRem salary lw#移除某个元素，如果存在返回1，不存在返回0(integer) 0127.0.0.1:6379&gt; ZRem salary lk(integer) 1127.0.0.1:6379&gt; ZRAnge salary 0 -11) "wl"2) "ml"127.0.0.1:6379&gt; ZCARD salary#获取集合中的个数(integer) 2127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores#按socre从大到小排序1) "ml"2) "1000"3) "wl"4) "900"127.0.0.1:6379&gt; ZCOUNT salary 0 900#获取集合内的总数(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="redis" scheme="http://www.luckyzmj.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis简介</title>
    <link href="http://www.luckyzmj.cn/posts/1313dd35.html"/>
    <id>http://www.luckyzmj.cn/posts/1313dd35.html</id>
    <published>2022-03-29T13:42:01.000Z</published>
    <updated>2022-04-07T07:08:36.497Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h3><ul><li>NoSQL的全称     not only SQL</li><li>方便扩展，数据之间没有关系</li><li>大数据高性能（读取11万次每秒，写8万次每秒）</li><li>数据类型多种多样且不需要事先设计数据库的表，有更好的扩展性    </li></ul><h3 id="传统的数据库和NoSQL的区别"><a href="#传统的数据库和NoSQL的区别" class="headerlink" title="传统的数据库和NoSQL的区别"></a>传统的数据库和NoSQL的区别</h3><h4 id="传统数据库："><a href="#传统数据库：" class="headerlink" title="传统数据库："></a>传统数据库：</h4><ul><li>结构化组织</li><li>数据都存储在表中</li><li>需要用sql进行查询</li><li>严格的一致性</li><li>数据定义语言</li></ul><h4 id="NoSQL："><a href="#NoSQL：" class="headerlink" title="NoSQL："></a>NoSQL：</h4><ul><li>不仅仅是数据库</li><li>没有固定的查询语言</li><li>键值对存储、列存储、文档存储、图形数据库等</li><li>最终一致性</li><li>CAP定理和BASE理论</li><li>高性能、高可用、高扩展</li></ul><h3 id="NoSQL的4种存储方式"><a href="#NoSQL的4种存储方式" class="headerlink" title="NoSQL的4种存储方式"></a>NoSQL的4种存储方式</h3><ul><li>k-v键值对    常见的有redis、Tair、Memcache</li><li>文档数据库：MongoDB</li><li>列存储数据库：HBase、分布式文件系统</li><li>图形数据库：Neo4j</li></ul><p><img src="https://i.loli.net/2021/04/29/RtrZoQSJaFqiGUs.png" alt="nosql分类.png"></p><h3 id="Redis的概述"><a href="#Redis的概述" class="headerlink" title="Redis的概述"></a>Redis的概述</h3><p>英文官网：    <a href="https://redis.io/">https://redis.io/</a></p><p>中文官网：    <a href="http://www.redis.cn/">http://www.redis.cn/</a></p><h4 id="redis是什么"><a href="#redis是什么" class="headerlink" title="redis是什么"></a>redis是什么</h4><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。</p><h4 id="redis能做什么"><a href="#redis能做什么" class="headerlink" title="redis能做什么"></a>redis能做什么</h4><ul><li>内存存储，持久化，常用的持久化是RDB、AOF</li><li>效率高用于缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器</li><li>………………</li></ul><h4 id="redis的特性"><a href="#redis的特性" class="headerlink" title="redis的特性"></a>redis的特性</h4><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ul><h4 id="redis数据库"><a href="#redis数据库" class="headerlink" title="redis数据库"></a>redis数据库</h4><p>redis有16个数据库，默认数据库是0号数据库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token keyword">select</span> <span class="token number">3</span><span class="token comment">#切换数据库到3</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> dbsize<span class="token comment">#显示当前数据库的key值数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> key <span class="token number">1</span><span class="token comment">#设置一个值</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> get key<span class="token comment">#获取值</span><span class="token string">"1"</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token number">1</span>    <span class="token comment">#切换到1号数据库</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> get key<span class="token comment">#得到的数据为nil，也即是在3号数据库设置的值在1号数据库查不到</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> keys *<span class="token comment">#查询当前数据库的所有key值</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> FLUSHALL<span class="token comment">#清空所有数据库的值</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> FLUSHdb <span class="token comment">#清空当前数据库的值</span>OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="redis的原理"><a href="#redis的原理" class="headerlink" title="redis的原理"></a>redis的原理</h4><p>redis是单线程的，redis是基于内存操作的，CPU不是redis的性能瓶颈，redis的性能瓶颈是由内存和网络带宽决定的。</p><p>redis是用c语言编写的，每秒大概100000QPS，性能不比Memcache差。</p><p>由于redis的数据都存储在内存中，所以单线程操作更加快速。多线程操作会存在CPU之间的切换消耗资源。对于内存系统，没有CPU切换效率最高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="redis" scheme="http://www.luckyzmj.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql简单介绍</title>
    <link href="http://www.luckyzmj.cn/posts/cac25959.html"/>
    <id>http://www.luckyzmj.cn/posts/cac25959.html</id>
    <published>2022-03-29T12:58:48.000Z</published>
    <updated>2022-04-07T07:08:36.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mysql中innodb和myisam"><a href="#mysql中innodb和myisam" class="headerlink" title="mysql中innodb和myisam"></a>mysql中innodb和myisam</h4><table><thead><tr><th></th><th>innodb</th><th>myisam</th></tr></thead><tbody><tr><td>事务</td><td>支持</td><td>不支持</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>全文索引</td><td>不支持</td><td>支持</td></tr><tr><td>锁级别</td><td>行级锁</td><td>表锁</td></tr><tr><td>表空间大小</td><td>较大，约为myisam的2倍</td><td>较小</td></tr><tr><td>索引</td><td>聚簇索引、索引就是数据，顺序存储，因此能缓存索引，也能缓存数据</td><td>非聚簇索引、索引和文件分开，随机存储，只能缓存索引</td></tr><tr><td>备份和恢复</td><td>拷贝数据文件、备份 binlog，或者用 mysqldump，数据量大时很慢</td><td>数据是以文件的形式存储，所以在跨平台的数据转移中会很方便</td></tr></tbody></table><blockquote><p>myisam：节约空间，速度快，如果不注重事务或读取操作较多时选择myisam，其他情况选择innodb。</p></blockquote><blockquote><p>innodb：安全性高、事务处理、多表多用户操作。</p></blockquote><p>mysql的数据库信息都存在data目录下：</p><ul><li>InnoDB基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小</li><li>MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型， .frm文件存储表定义，数据文件的扩展名为.MYD， 索引文件的扩展名是.MYI</li></ul><h4 id="mysql的事务ACID"><a href="#mysql的事务ACID" class="headerlink" title="mysql的事务ACID"></a>mysql的事务ACID</h4><ul><li>原子性(A)：事务是最小单位，不可再分</li><li>一致性©：事务要求所有的DML语句操作的时候，必须保证同时成功或者同时失败</li><li>隔离性(I)：事务A和事务B之间具有隔离性</li><li>持久性(D)：是事务的保证，事务终结的标志(内存的数据持久到硬盘文件中)</li></ul><blockquote><p>隔离存在的并发问题</p></blockquote><ul><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作（即未提交），那么A读取到的数据是脏数据</li><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ul><blockquote><p>隔离级别的分类</p></blockquote><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p><strong>mysql默认的事务隔离级别为repeatable-read</strong></p><blockquote><p>mysql事务的常用方法</p></blockquote><pre class="line-numbers language-SHELl" data-language="SHELl"><code class="language-SHELl">set autocommit =0   #关闭自动提交set autocommit =1#开启自动提交Start Transaction#开启事务Commit #提交事务Rollback #回滚事务End Transaction#事务结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h4><h5 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h5><ul><li><strong>InnoDB使用的是B+Tree，每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</strong></li><li><strong>B-Tree通常意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同，很适合查找范围数据。</strong></li><li><strong>B-Tree可以对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及不以通配符开始的LIKE使用索引。</strong></li></ul><h5 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h5><blockquote><p>优点：</p></blockquote><ul><li>建立索引的列可以保证行的唯一性，生成唯一的rowId</li><li> 建立索引可以有效缩短数据的检索时间</li><li> 建立索引可以加快表与表之间的连接</li><li> 为用来排序或者是分组的字段添加索引可以加快分组和排序顺序</li></ul><blockquote><p>缺点：</p></blockquote><ul><li><p>创建索引和维护索引需要时间成本，这个成本随着数据量的增加而加大</p></li><li><p>创建索引和维护索引需要空间成本，每一条索引都要占据数据库的物理存储空间，数据量越大，占用空间也越大（数据表占据的是数据库的数据空间）</p></li><li><p>会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长</p></li></ul><h5 id="常见的索引类型"><a href="#常见的索引类型" class="headerlink" title="常见的索引类型"></a>常见的索引类型</h5><ul><li><p>普通索引      index</p><p><strong>普通索引是最基本的索引，它没有任何限制。</strong></p></li><li><p>唯一索引     uniqe index</p><p><strong>唯一索引和普通索引类似，主要的区别在于，唯一索引限制列的值必须唯一，但允许存在空值（只允许存在一条空值）。</strong></p></li><li><p>主键索引     primary key</p><p><strong>主键索引是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引</strong></p></li><li><p>组合索引     index</p><p><strong>复合索引是在多个字段上创建的索引。复合索引遵守“最左前缀”原则，即在查询条件中使用了复合索引的第一个字段，索引才会被使用。因此，在复合索引中索引列的顺序至关重要。</strong></p></li><li><p>全文索引    fullText</p><p><strong>FULLTEXT 索引在 MySQL 5.6 版本之后支持 InnoDB，而之前的版本只支持 MyISAM 表。一般用于模糊查询</strong></p></li></ul><h5 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h5><ul><li>在where后使用or，导致索引失效（尽量少用or）</li><li>使用like ，like查询是以%开头</li><li>复合索引遵守“最左前缀”原则，即在查询条件中使用了复合索引的第一个字段，索引才会被使用</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引</li><li>在索引字段上使用not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描</li><li>DATE_FORMAT()格式化时间，格式化后的时间再去比较，可能会导致索引失效。</li><li>is null， is not null也无法使用索引</li></ul><h5 id="什么情况下不适合建立索引"><a href="#什么情况下不适合建立索引" class="headerlink" title="什么情况下不适合建立索引"></a>什么情况下不适合建立索引</h5><ul><li>小数据量的表不超过10万</li><li>数据变动强的字段不建立索引</li><li>大字段不建立索引</li><li>有枚举类型的字段不建议索引，或者建立组合索引</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="数据库" scheme="http://www.luckyzmj.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>docker进阶</title>
    <link href="http://www.luckyzmj.cn/posts/abdfa13a.html"/>
    <id>http://www.luckyzmj.cn/posts/abdfa13a.html</id>
    <published>2022-03-29T12:23:13.000Z</published>
    <updated>2022-04-07T07:08:36.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="容器卷技术"><a href="#容器卷技术" class="headerlink" title="容器卷技术"></a>容器卷技术</h4><p>容器卷技术的目的是为了持久化和同步操作！容器件也可以进行同步。</p><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">#容器与本地数据挂载# 一、命令挂载docker run -it -v  linux文件目录:容器目录 容器id /bin/bash#把linux目录和容器目录进行同步# 二、dockerFile 挂载# 1、建立dockerFile文件  其中书写指令是必须都大写FROM centos#要挂载的镜像VOLUME ["volume01","volume2"]#要挂载的卷CMD echo "----end----"CMD /bin/bash# 2、运行文件docker build -f 创建的dockerFile目录 -t 生成的名字#容器之间挂载 把两容器关联起来docker run -it --name 新建容器 --volume-from 要挂载的容器  moer/centos:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Dockerfile构建过程"><a href="#Dockerfile构建过程" class="headerlink" title="Dockerfile构建过程"></a>Dockerfile构建过程</h4><h6 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h6><p>1、每个指令必须的大写</p><p>2、指令的执行顺序从上到下</p><p>3、#表示注释</p><p>4、每个指令都会提交一个镜像，层层提交。</p><h4 id="DokcerFile的基础命令"><a href="#DokcerFile的基础命令" class="headerlink" title="DokcerFile的基础命令"></a>DokcerFile的基础命令</h4><p><img src="https://i.loli.net/2021/04/22/9BiAIRS7wEUqkPD.jpg" alt="docker命令.jpg"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM <span class="token comment">#基础镜像</span>MAINRAINER<span class="token comment">#姓名+邮箱</span>RUN<span class="token comment">#运行命令</span>ADD<span class="token comment">#添加分层镜像</span>WORKDIR<span class="token comment">#工作目录</span>VOLUME<span class="token comment">#挂载卷</span>EXPOSE<span class="token comment">#暴露端口号</span>CMD<span class="token comment">#指定容器运行的适合要启动的命令，只有最后一个命令生效，不可追加</span>ENTRYPOINT<span class="token comment">#指定容器运行的适合要启动的命令，可以追加命令</span>ENV<span class="token comment">#构建的时候设置环境变量</span>COPY<span class="token comment">#把一个镜像拷贝进去类似ADD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h6><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">docker network ls   #查看所有的docker网络b6fbe2727cc1        bridge              bridge              locale8ea254fb069        host                host                local4956a8e7920a        none                null                local#其中bridge 是桥接模式（默认）host是主机模式  none不配置网络<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="springboot项目打包成Docker镜像"><a href="#springboot项目打包成Docker镜像" class="headerlink" title="springboot项目打包成Docker镜像"></a>springboot项目打包成Docker镜像</h6><pre class="line-numbers language-none"><code class="language-none">1、编写成功Springboot项目2、达成jar包3、编写dockerFile进行发布4、构建镜像5、发布运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="docker" scheme="http://www.luckyzmj.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令汇总</title>
    <link href="http://www.luckyzmj.cn/posts/a2145400.html"/>
    <id>http://www.luckyzmj.cn/posts/a2145400.html</id>
    <published>2022-03-28T15:36:29.000Z</published>
    <updated>2022-04-07T07:08:36.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="普通指令"><a href="#普通指令" class="headerlink" title="普通指令"></a>普通指令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动docker</span>systemctl start docker <span class="token comment">#停止docker</span>systemctl stop docker<span class="token comment">#重启docker</span>systemctl restart docker<span class="token comment">#查看版本</span>docker version<span class="token comment">#查看docker信息</span>docker info<span class="token comment">#帮助</span>docker --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL"># 查看已安装的镜像docker images# 查询镜像docker search 镜像名   #例如：docker search tomcat# 拉取镜像docker pull 镜像名#例如：docker pull tomcat:8.5 如果后面不跟版本后则默认下载最新版本# 删除镜像docker rmi 镜像名#例如 docker rmi tomcatdocker rmi -f  镜像id#镜像id是创建镜像的唯一表示# 删除所有镜像docker rmi -f ${docker images -qa}  #即查询出所有镜像并删除# 打包一个镜像docker commit -a 作者信息 -m="要提交的信息" 镜像id  要生产的镜像名称# 运行一个镜像,运行成功之后则生成一个容器docker run -it -p 外部端口号:内部端口号 镜像名称  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL"># 通过镜像生成容器的常用命令--name  #给容器起一个名字-d#表示后台运行-it#表示进入控制台运行与-d功能相同-P#随机分配一个端口号不常用-p#端口映射外部端口：内部端口-v#卷挂载宿主机路径：内部路径   用途是挂载文件是同步的，即可通过修改外部文件已到达修改内部文件的目的# 查询docker正在运行的容器docker ps   #后续的常用参数-a #查看所有容器-l#最近创建的容器-n#最近创建的n个容器# 退出容器exit #退出并停止ctrl+p+Q#退出但不停止# 启动、停止、重启、杀死容器docker start/stop/restart/kill 容器id或容器名# 删除容器   docker rm 容器id或容器名#只能删除已停止的容器docker rm -f  容器id或容器名#强制删除容器docker rm -f ${docker ps -qa}  #删除所有容器#重新进入容器docker attach 容器id或容器名#这种方式太慢docker exex -it 容器id或容器名 /bin/bash #进入正在执行的容器并进行交互# 拷贝文件从内部到外部docker cp 容器id或容器名:文件路径 宿主机路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日志命令"><a href="#日志命令" class="headerlink" title="日志命令"></a>日志命令</h4><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">docker logs -f -t --tail 10   容器id或容器名-t    #表示显示时间-f#最新的日志打印--tail #行数-n#全部打印docker top 容器id或容器名    #查看容器内的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="docker" scheme="http://www.luckyzmj.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker基础</title>
    <link href="http://www.luckyzmj.cn/posts/5ae6092.html"/>
    <id>http://www.luckyzmj.cn/posts/5ae6092.html</id>
    <published>2022-03-28T04:49:37.000Z</published>
    <updated>2022-04-07T07:08:36.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h6 id="docker的默认工作路径是-var-lib-docker"><a href="#docker的默认工作路径是-var-lib-docker" class="headerlink" title="docker的默认工作路径是      /var/lib/docker"></a>docker的默认工作路径是      /var/lib/docker</h6><h6 id="docker的基础是镜像与容器"><a href="#docker的基础是镜像与容器" class="headerlink" title="docker的基础是镜像与容器"></a>docker的基础是镜像与容器</h6><h6 id="docker的官网地址：https-docs-docker-com"><a href="#docker的官网地址：https-docs-docker-com" class="headerlink" title="docker的官网地址：https://docs.docker.com/"></a>docker的官网地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></h6><h4 id="Docker的基本命令："><a href="#Docker的基本命令：" class="headerlink" title="Docker的基本命令："></a>Docker的基本命令：</h4><pre class="line-numbers language-none"><code class="language-none">docker version    #查看docker的基本信息docker info #显示docker的系统信息，包括镜像和容器镜像docker 命令 --help #docker命令帮助查询12321312<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Docker的镜像常用命令："><a href="#Docker的镜像常用命令：" class="headerlink" title="Docker的镜像常用命令："></a>Docker的镜像常用命令：</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker images -a<span class="token comment">#查看所有镜像信息</span>docker images -q <span class="token comment">#查看所有镜像id</span>docker images -filter <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>   <span class="token comment">#过滤信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="docker搜索镜像："><a href="#docker搜索镜像：" class="headerlink" title="docker搜索镜像："></a>docker搜索镜像：</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search 服务名称  例如：docker search java  docker search mysqldocker search mysql --filter<span class="token operator">=</span>stars<span class="token operator">=</span><span class="token number">200</span>   <span class="token comment">#查询星数在200以上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拉取镜像："><a href="#拉取镜像：" class="headerlink" title="拉取镜像："></a>拉取镜像：</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull <span class="token punctuation">(</span>镜像名称<span class="token punctuation">)</span>：（镜像版本）   <span class="token comment">#例如  docker pull mysql:5.7   </span>docker pull <span class="token punctuation">(</span>镜像名称<span class="token punctuation">)</span><span class="token comment">#拉取最新版本的镜像信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除镜像："><a href="#删除镜像：" class="headerlink" title="删除镜像："></a>删除镜像：</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi -f <span class="token punctuation">(</span>镜像id<span class="token punctuation">)</span><span class="token comment">#删除镜像信息，镜像d可通过docker images进行查询</span>docker rmi -f $（dokcer images） <span class="token comment">#删除所有镜像信息</span>dokker rmi -f 镜像id 镜像id <span class="token comment">#删除多个镜像信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Docker的容器命令："><a href="#Docker的容器命令：" class="headerlink" title="Docker的容器命令："></a>Docker的容器命令：</h4><h6 id="首先我们先下载个centos镜像命令进行学习"><a href="#首先我们先下载个centos镜像命令进行学习" class="headerlink" title="首先我们先下载个centos镜像命令进行学习"></a>首先我们先下载个centos镜像命令进行学习</h6><pre class="line-numbers language-none"><code class="language-none">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="容器命令："><a href="#容器命令：" class="headerlink" title="容器命令："></a>容器命令：</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment">#常用参数</span>--name   <span class="token comment">#容器名字，用来区分容器</span>-d <span class="token comment">#后台方式运行</span>-it  <span class="token comment">#使用交互方式运行，进入容器查看内容</span>-p <span class="token comment">#指定容器的端口  -p 主机端口：容器端口</span>-P <span class="token comment">#随机指定端口</span>运行查看容器：docker run -it centos /bin/bash  <span class="token comment">#进入centos</span>docker <span class="token function">ps</span> <span class="token comment">#查看正在运行的容器</span>docker <span class="token function">ps</span> -a <span class="token comment">#查看历史运行的容器</span>docker <span class="token function">ps</span> -n<span class="token operator">=</span>？   <span class="token comment">#查看最近运行的容器,如果加上=？则表示最近几条</span>退出容器：<span class="token builtin class-name">exit</span> <span class="token comment">#容器停止并退出</span>CTRL+P+Q<span class="token comment">#容器不停止退出</span>删除容器：docker <span class="token function">rm</span> 容器id    <span class="token comment">#删除非运行的容器，如果运行会报错</span>docker <span class="token function">rm</span> -f 容器id<span class="token comment">#强制删除容器</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span class="token comment">#删除所有容器id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="启动容器命令："><a href="#启动容器命令：" class="headerlink" title="启动容器命令："></a>启动容器命令：</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker start 容器id<span class="token comment">#启动容器</span>docker restart 容器id<span class="token comment">#重启容器</span>docker stop 容器id<span class="token comment">#停止正在运行的容器</span>docker <span class="token function">kill</span> 容器id<span class="token comment">#强制停止当前容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="日志命令："><a href="#日志命令：" class="headerlink" title="日志命令："></a>日志命令：</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs -tf <span class="token function">tail</span> <span class="token number">10</span> 容器id   <span class="token comment">#查询后十条日志信息   tail 10 可省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="常用其他命令："><a href="#常用其他命令：" class="headerlink" title="常用其他命令："></a>常用其他命令：</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token function">top</span> 容器id<span class="token comment">#查看容器进程</span>docker inspect  容器id<span class="token comment">#查看容器的基本信息</span>docker <span class="token builtin class-name">exec</span>  -it  容器id /bin/bash<span class="token comment">#进入正在启动的容器，并开启一个新容器</span>docker attach 容器id<span class="token comment">#进入正在启动的容器，不会启动新的容器</span>docker <span class="token function">cp</span> 容器id:容器内路径 容器外路径  <span class="token comment">#复制文件从内部容器到外部容器</span>docker stats <span class="token comment">#查询docker的内存使用率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="下载nginx镜像到linux服务器"><a href="#下载nginx镜像到linux服务器" class="headerlink" title="下载nginx镜像到linux服务器"></a>下载nginx镜像到linux服务器</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search nginx <span class="token comment">#查看镜像</span>docker pull nginx <span class="token comment">#下载最新版本的镜像</span>docker images<span class="token comment">#查看下载的容器</span>docker run -d --name nginx01 -p <span class="token number">3344</span>:80 nginx<span class="token comment">#-d   后台运行</span><span class="token comment"># --name 给容器起个名字以便分辨</span><span class="token comment"># -p 3344 宿主机端口,即外部端口</span><span class="token comment"># 80 内部容器端口即nginx端口 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="下载mysql5-7到linux服务器"><a href="#下载mysql5-7到linux服务器" class="headerlink" title="下载mysql5.7到linux服务器"></a>下载mysql5.7到linux服务器</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#获取mysql镜像</span>docker pull mysql:5.7<span class="token comment"># -v 卷挂载</span><span class="token comment"># -e 环境配置</span><span class="token comment"># -d 后台运行</span><span class="token comment"># -p 端口映射</span><span class="token comment"># --name 给容器命名</span><span class="token comment"># 配置mysql地址环境</span>docker run -d -p <span class="token number">3310</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql  -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>wlk161536 --name mysql01 mysql:5.7<span class="token comment">#-v的目的是映射到本地 前面的表示宿主机文件，后面表示docker内文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit -m<span class="token operator">=</span><span class="token string">"描述提交的信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目录镜像名:<span class="token punctuation">[</span>tags版本<span class="token punctuation">]</span>例如：<span class="token number">1</span>、先运行一个tomcat镜像docker run -it 容器id /bin/bash<span class="token number">2</span>、启动tomcat镜像docker <span class="token builtin class-name">exec</span> -it 容器id /bin/bash<span class="token number">3</span>、由于docker中的webApps下没有目录，需要webApps.dist文件复制到webApps下<span class="token function">cp</span> -r webApps.dist/* webApps<span class="token number">4</span>、把修改后的镜像提交docker commit -m <span class="token operator">=</span><span class="token string">"添加webbApps信息"</span> -a<span class="token operator">=</span><span class="token string">"moerWolld"</span> 容器id tomcat2:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-SHELL" data-language="SHELL"><code class="language-SHELL">#查看镜像的历史构建记录   可查看构造方式仿造一个同样的镜像docker history 镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="docker" scheme="http://www.luckyzmj.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mybatis简单介绍</title>
    <link href="http://www.luckyzmj.cn/posts/bac22b86.html"/>
    <id>http://www.luckyzmj.cn/posts/bac22b86.html</id>
    <published>2022-03-27T12:16:25.000Z</published>
    <updated>2022-04-07T07:08:36.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="mybatis的中文官网地址"><a href="#mybatis的中文官网地址" class="headerlink" title="mybatis的中文官网地址"></a>mybatis的中文官网地址</h4><p><a href="https://mybatis.org/mybatis-3/zh/">https://mybatis.org/mybatis-3/zh/</a></p><h4 id="mybatis的主要核心部件"><a href="#mybatis的主要核心部件" class="headerlink" title="mybatis的主要核心部件"></a>mybatis的主要核心部件</h4><ul><li>SqlSession    表示和数据库交互的会话，完成必要的数据库增删改查功能</li><li>Executor       执行器，是mybatis的核心，负责sql语句的执行，缓存的查询</li><li>StatementHandler    封装了JDBC Statement操作，负责对JDBC statement的操作，如设置参数，或将结果集转换成List</li><li>ParameterHandler    负责对用户传递的参数转换成JDBC Statement所需要的参数</li><li>ResultSetHandler      负责将jdbc返回的结果集转换成List集合</li><li>TypeHandler              负责将java的数据类型和jdbc数据类型之间的转换</li><li>Configuration             配置mybatis的信息</li><li>SqlSource                    负责用户传递的paramterObject,动态的生成SQL语句，将信息封装到BoundSql中</li><li>BoundSql                    表示动态生成SQL语句以及相应的参数信息</li></ul><h4 id="mybatis-工作流程"><a href="#mybatis-工作流程" class="headerlink" title="mybatis 工作流程"></a>mybatis 工作流程</h4><ol><li>读取mybatis的配置信息，可以是xml的格式，也可以是基于Configuration的对象。</li><li>实例化SqlSessionFactoryBuilder,并通过build配置文件生成SqlSessionFactory实例</li><li>创建一个SqlSession会话，用于实现CRUD。</li><li>创建会话时也会创建一个新的Executor执行器，用于执行SQL或者查询缓存</li><li>执行完成，返回结果并关闭SqlSession会话。</li></ol><h4 id="mybatis的缓存"><a href="#mybatis的缓存" class="headerlink" title="mybatis的缓存"></a>mybatis的缓存</h4><h5 id="一级缓存SqlSession"><a href="#一级缓存SqlSession" class="headerlink" title="一级缓存SqlSession"></a>一级缓存SqlSession</h5><p>mybatis的一级缓存是默认开启的，是SqlSession级别的，即拿到这个链接到结束连接的过程中缓存是有效的。其特点有以下：</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</li><li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li><li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li><li>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--可以设置缓存算法，刷新间隔、引用大小、只读表示等 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>  <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>  <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>  <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二级缓存nameSpace"><a href="#二级缓存nameSpace" class="headerlink" title="二级缓存nameSpace"></a>二级缓存nameSpace</h5><p>mybatis的二级缓存也叫全局缓存，由于一级缓存的作用域只在sqlSession中（太窄了），所以诞生了二级缓存，它是基于nameSpace级别的缓存，相当于一个nameSpace对应一个二级缓存。mybatis的二级缓存需要手动开启。</p><p>二级缓存的工作机制：</p><ul><li>当一个会话查询到一条数据时首先会存储到一级缓存中</li><li>如果当前会话关闭，则一级缓存不存在了，则会把一级缓存的信息过渡到二级缓存</li><li>当我们再次在此nameSPace空间内查询时则会从二级缓存中获得内容</li><li>不同的nameSpace有不同的缓存集合</li></ul><h5 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h5><p>自定义缓存只需实现Cache就可以了！具体可查看官方文档！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="中间件" scheme="http://www.luckyzmj.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="mybatis" scheme="http://www.luckyzmj.cn/tags/mybatis/"/>
    
  </entry>
  
</feed>
